
usb-learn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007720  08007720  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007728  08007728  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb4  200000fc  0800782c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  0800782c  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c43  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d30  00000000  00000000  00031d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00035800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bb3  00000000  00000000  00036448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011978  00000000  00000000  0004dffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c0d  00000000  00000000  0005f973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003668  00000000  00000000  000e85d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007690 	.word	0x08007690

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007690 	.word	0x08007690

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <fromhere>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int fromhere(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Register_USB_rxCb(&UsbRxCb);
 80004de:	4811      	ldr	r0, [pc, #68]	; (8000524 <fromhere+0x4c>)
 80004e0:	f006 fc58 	bl	8006d94 <Register_USB_rxCb>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa1c 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f820 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8b4 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f888 	bl	8000604 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004f4:	f006 fb46 	bl	8006b84 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t sampleBuffer[] = "test from stm32 ... \r\n" ;
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <fromhere+0x50>)
 80004fa:	463c      	mov	r4, r7
 80004fc:	461d      	mov	r5, r3
 80004fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000502:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000506:	6020      	str	r0, [r4, #0]
 8000508:	3404      	adds	r4, #4
 800050a:	8021      	strh	r1, [r4, #0]
 800050c:	3402      	adds	r4, #2
 800050e:	0c0b      	lsrs	r3, r1, #16
 8000510:	7023      	strb	r3, [r4, #0]
  while (1)
  {
	  CDC_Transmit_FS(sampleBuffer, sizeof(sampleBuffer));
 8000512:	463b      	mov	r3, r7
 8000514:	2117      	movs	r1, #23
 8000516:	4618      	mov	r0, r3
 8000518:	f006 fc04 	bl	8006d24 <CDC_Transmit_FS>
	  HAL_Delay(100);
 800051c:	2064      	movs	r0, #100	; 0x64
 800051e:	f000 fa71 	bl	8000a04 <HAL_Delay>
	  CDC_Transmit_FS(sampleBuffer, sizeof(sampleBuffer));
 8000522:	e7f6      	b.n	8000512 <fromhere+0x3a>
 8000524:	08000735 	.word	0x08000735
 8000528:	080076a8 	.word	0x080076a8

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f007 f8a0 	bl	8007680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b29      	ldr	r3, [pc, #164]	; (80005fc <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a28      	ldr	r2, [pc, #160]	; (80005fc <SystemClock_Config+0xd0>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <SystemClock_Config+0xd0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd4>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000590:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 ff74 	bl	80024a4 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c2:	f000 f8c7 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f9d6 	bl	8002994 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ee:	f000 f8b1 	bl	8000754 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_USART2_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART2_UART_Init+0x4c>)
 800063c:	f002 fbca 	bl	8002dd4 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f885 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000118 	.word	0x20000118
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a2c      	ldr	r2, [pc, #176]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <MX_GPIO_Init+0xd0>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_GPIO_Init+0xd0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <MX_GPIO_Init+0xd4>)
 80006e4:	f000 fc48 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_GPIO_Init+0xd8>)
 8000700:	f000 fab6 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000704:	2320      	movs	r3, #32
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_GPIO_Init+0xd4>)
 800071c:	f000 faa8 	bl	8000c70 <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	40020800 	.word	0x40020800

08000734 <UsbRxCb>:

/* USER CODE BEGIN 4 */
static void UsbRxCb(uint8_t *buff, uint8_t len)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
//	CDC_Transmit_FS("dev says : ", 11);
	CDC_Transmit_FS(buff, len);
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	b29b      	uxth	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f006 faec 	bl	8006d24 <CDC_Transmit_FS>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <HAL_MspInit+0x4c>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_MspInit+0x4c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800079e:	2007      	movs	r0, #7
 80007a0:	f000 fa24 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_UART_MspInit+0x84>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d12b      	bne.n	800082a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_UART_MspInit+0x88>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_UART_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080a:	230c      	movs	r3, #12
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081a:	2307      	movs	r3, #7
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <HAL_UART_MspInit+0x8c>)
 8000826:	f000 fa23 	bl	8000c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40004400 	.word	0x40004400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f89a 	bl	80009c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <OTG_FS_IRQHandler+0x10>)
 800089a:	f000 fcd6 	bl	800124a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20001684 	.word	0x20001684

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e8:	4c0b      	ldr	r4, [pc, #44]	; (8000918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f6:	f7ff ffd7 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f006 fe8f 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
  bl  fromhere//main
 80008fe:	f7ff fdeb 	bl	80004d8 <fromhere>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000910:	08007730 	.word	0x08007730
  ldr r2, =_sbss
 8000914:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000918:	20001db0 	.word	0x20001db0

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_Init+0x40>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_Init+0x40>)
 8000936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x40>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f94f 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f808 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff ff04 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f967 	bl	8000c56 <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f000 f92f 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	2000019c 	.word	0x2000019c

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	2000019c 	.word	0x2000019c

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff ffee 	bl	80009ec <HAL_GetTick>
 8000a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4413      	add	r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2a:	bf00      	nop
 8000a2c:	f7ff ffde 	bl	80009ec <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <__NVIC_EnableIRQ+0x38>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff8e 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff29 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff3e 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff8e 	bl	8000b40 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5d 	bl	8000aec <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff31 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	e159      	b.n	8000f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 8148 	bne.w	8000f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d130      	bne.n	8000d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f003 0201 	and.w	r2, r3, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d017      	beq.n	8000d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d123      	bne.n	8000db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	69b9      	ldr	r1, [r7, #24]
 8000db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0203 	and.w	r2, r3, #3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80a2 	beq.w	8000f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a56      	ldr	r2, [pc, #344]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e12:	4a52      	ldr	r2, [pc, #328]	; (8000f5c <HAL_GPIO_Init+0x2ec>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <HAL_GPIO_Init+0x2f0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d019      	beq.n	8000e72 <HAL_GPIO_Init+0x202>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a48      	ldr	r2, [pc, #288]	; (8000f64 <HAL_GPIO_Init+0x2f4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x1fe>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a47      	ldr	r2, [pc, #284]	; (8000f68 <HAL_GPIO_Init+0x2f8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x1fa>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a46      	ldr	r2, [pc, #280]	; (8000f6c <HAL_GPIO_Init+0x2fc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x1f6>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a45      	ldr	r2, [pc, #276]	; (8000f70 <HAL_GPIO_Init+0x300>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x1f2>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e008      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e004      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e72:	2300      	movs	r3, #0
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	f002 0203 	and.w	r2, r2, #3
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	4093      	lsls	r3, r2
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e84:	4935      	ldr	r1, [pc, #212]	; (8000f5c <HAL_GPIO_Init+0x2ec>)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ee0:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f0a:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	f67f aea2 	bls.w	8000c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40013c00 	.word	0x40013c00

08000f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
 8000f84:	4613      	mov	r3, r2
 8000f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f94:	e003      	b.n	8000f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	041a      	lsls	r2, r3, #16
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	619a      	str	r2, [r3, #24]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fac:	b08f      	sub	sp, #60	; 0x3c
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e10f      	b.n	80011dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f005 fffe 	bl	8006fd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fac1 	bl	8003582 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	687e      	ldr	r6, [r7, #4]
 8001008:	466d      	mov	r5, sp
 800100a:	f106 0410 	add.w	r4, r6, #16
 800100e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800101a:	e885 0003 	stmia.w	r5, {r0, r1}
 800101e:	1d33      	adds	r3, r6, #4
 8001020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f002 f998 	bl	8003358 <USB_CoreInit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2202      	movs	r2, #2
 8001032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0d0      	b.n	80011dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f002 faaf 	bl	80035a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e04a      	b.n	80010e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	333d      	adds	r3, #61	; 0x3d
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	333c      	adds	r3, #60	; 0x3c
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	b298      	uxth	r0, r3
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3344      	adds	r3, #68	; 0x44
 8001088:	4602      	mov	r2, r0
 800108a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	3340      	adds	r3, #64	; 0x40
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3348      	adds	r3, #72	; 0x48
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	334c      	adds	r3, #76	; 0x4c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3354      	adds	r3, #84	; 0x54
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3af      	bcc.n	800104c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e044      	b.n	800117c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3b5      	bcc.n	80010f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	687e      	ldr	r6, [r7, #4]
 800118e:	466d      	mov	r5, sp
 8001190:	f106 0410 	add.w	r4, r6, #16
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011a4:	1d33      	adds	r3, r6, #4
 80011a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f002 fa47 	bl	800363c <USB_DevInit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00d      	b.n	80011dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fb96 	bl	8004906 <USB_DevDisconnect>

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_PCD_Start+0x1c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e020      	b.n	8001242 <HAL_PCD_Start+0x5e>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	2b01      	cmp	r3, #1
 800120e:	d109      	bne.n	8001224 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001214:	2b01      	cmp	r3, #1
 8001216:	d005      	beq.n	8001224 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f002 f999 	bl	8003560 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fb46 	bl	80048c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800124a:	b590      	push	{r4, r7, lr}
 800124c:	b08d      	sub	sp, #52	; 0x34
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fc04 	bl	8004a6e <USB_GetMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 848a 	bne.w	8001b82 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fb68 	bl	8004948 <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8480 	beq.w	8001b80 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fb55 	bl	8004948 <USB_ReadInterrupts>
 800129e:	4603      	mov	r3, r0
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d107      	bne.n	80012b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f002 0202 	and.w	r2, r2, #2
 80012b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fb43 	bl	8004948 <USB_ReadInterrupts>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	d161      	bne.n	8001390 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0210 	bic.w	r2, r2, #16
 80012da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f003 020f 	and.w	r2, r3, #15
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	3304      	adds	r3, #4
 80012fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	0c5b      	lsrs	r3, r3, #17
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	2b02      	cmp	r3, #2
 8001306:	d124      	bne.n	8001352 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d035      	beq.n	8001380 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800131e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001322:	b29b      	uxth	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	6a38      	ldr	r0, [r7, #32]
 8001328:	f003 f97a 	bl	8004620 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001338:	441a      	add	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	6a1a      	ldr	r2, [r3, #32]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134a:	441a      	add	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	e016      	b.n	8001380 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	0c5b      	lsrs	r3, r3, #17
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	2b06      	cmp	r3, #6
 800135c:	d110      	bne.n	8001380 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001364:	2208      	movs	r2, #8
 8001366:	4619      	mov	r1, r3
 8001368:	6a38      	ldr	r0, [r7, #32]
 800136a:	f003 f959 	bl	8004620 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	6a1a      	ldr	r2, [r3, #32]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	441a      	add	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0210 	orr.w	r2, r2, #16
 800138e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fad7 	bl	8004948 <USB_ReadInterrupts>
 800139a:	4603      	mov	r3, r0
 800139c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013a4:	f040 80a7 	bne.w	80014f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fadc 	bl	800496e <USB_ReadDevAllOutEpInterrupt>
 80013b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013b8:	e099      	b.n	80014ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 808e 	beq.w	80014e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fb00 	bl	80049d6 <USB_ReadDevOutEPInterrupt>
 80013d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	015a      	lsls	r2, r3, #5
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ee:	461a      	mov	r2, r3
 80013f0:	2301      	movs	r3, #1
 80013f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fec2 	bl	8002180 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	2308      	movs	r3, #8
 8001416:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 ff98 	bl	8002350 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001436:	461a      	mov	r2, r3
 8001438:	2310      	movs	r3, #16
 800143a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d030      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	2b80      	cmp	r3, #128	; 0x80
 8001450:	d109      	bne.n	8001466 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001464:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	3304      	adds	r3, #4
 800147a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	78db      	ldrb	r3, [r3, #3]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2200      	movs	r2, #0
 8001488:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f005 feb5 	bl	8007200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a2:	461a      	mov	r2, r3
 80014a4:	2302      	movs	r3, #2
 80014a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014be:	461a      	mov	r2, r3
 80014c0:	2320      	movs	r3, #32
 80014c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014da:	461a      	mov	r2, r3
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f af62 	bne.w	80013ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 fa24 	bl	8004948 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800150a:	f040 80db 	bne.w	80016c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fa45 	bl	80049a2 <USB_ReadDevAllInEpInterrupt>
 8001518:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800151e:	e0cd      	b.n	80016bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80c2 	beq.w	80016b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fa6b 	bl	8004a12 <USB_ReadDevInEPInterrupt>
 800153c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d057      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	2201      	movs	r2, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800155c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	69f9      	ldr	r1, [r7, #28]
 8001564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001568:	4013      	ands	r3, r2
 800156a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001578:	461a      	mov	r2, r3
 800157a:	2301      	movs	r3, #1
 800157c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d132      	bne.n	80015ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	334c      	adds	r3, #76	; 0x4c
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4403      	add	r3, r0
 80015a6:	3348      	adds	r3, #72	; 0x48
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4419      	add	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4403      	add	r3, r0
 80015ba:	334c      	adds	r3, #76	; 0x4c
 80015bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d113      	bne.n	80015ec <HAL_PCD_IRQHandler+0x3a2>
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3354      	adds	r3, #84	; 0x54
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015e4:	461a      	mov	r2, r3
 80015e6:	2101      	movs	r1, #1
 80015e8:	f003 fa72 	bl	8004ad0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f005 fd7f 	bl	80070f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160e:	461a      	mov	r2, r3
 8001610:	2308      	movs	r3, #8
 8001612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800162a:	461a      	mov	r2, r3
 800162c:	2310      	movs	r3, #16
 800162e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001646:	461a      	mov	r2, r3
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d023      	beq.n	800169e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001658:	6a38      	ldr	r0, [r7, #32]
 800165a:	f002 f953 	bl	8003904 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	3338      	adds	r3, #56	; 0x38
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	3304      	adds	r3, #4
 8001670:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2200      	movs	r2, #0
 800167e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f005 fdcc 	bl	8007224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2302      	movs	r3, #2
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fcdb 	bl	8002066 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	3301      	adds	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f47f af2e 	bne.w	8001520 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 f93d 	bl	8004948 <USB_ReadInterrupts>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016d8:	d122      	bne.n	8001720 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d108      	bne.n	800170a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001700:	2100      	movs	r1, #0
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fec2 	bl	800248c <HAL_PCDEx_LPM_Callback>
 8001708:	e002      	b.n	8001710 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f005 fd6a 	bl	80071e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 f90f 	bl	8004948 <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001734:	d112      	bne.n	800175c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f005 fd26 	bl	8007198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800175a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 f8f1 	bl	8004948 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001770:	f040 80b7 	bne.w	80018e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2110      	movs	r1, #16
 800178e:	4618      	mov	r0, r3
 8001790:	f002 f8b8 	bl	8003904 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001798:	e046      	b.n	8001828 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a6:	461a      	mov	r2, r3
 80017a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	0151      	lsls	r1, r2, #5
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	440a      	add	r2, r1
 80017c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017da:	461a      	mov	r2, r3
 80017dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	0151      	lsls	r1, r2, #5
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	440a      	add	r2, r1
 80017f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001812:	0151      	lsls	r1, r2, #5
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	440a      	add	r2, r1
 8001818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800181c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001820:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	3301      	adds	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182e:	429a      	cmp	r2, r3
 8001830:	d3b3      	bcc.n	800179a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001840:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001844:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185e:	f043 030b 	orr.w	r3, r3, #11
 8001862:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001874:	f043 030b 	orr.w	r3, r3, #11
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	e015      	b.n	80018a8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800188e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001892:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a2:	f043 030b 	orr.w	r3, r3, #11
 80018a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018cc:	461a      	mov	r2, r3
 80018ce:	f003 f8ff 	bl	8004ad0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f82e 	bl	8004948 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f6:	d124      	bne.n	8001942 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 f8c4 	bl	8004a8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 f879 	bl	80039fe <USB_GetDevSpeed>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681c      	ldr	r4, [r3, #0]
 8001918:	f001 fa28 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 800191c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	4620      	mov	r0, r4
 8001928:	f001 fd78 	bl	800341c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f005 fc0a 	bl	8007146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001940:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fffe 	bl	8004948 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b08      	cmp	r3, #8
 8001954:	d10a      	bne.n	800196c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f005 fbe7 	bl	800712a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f002 0208 	and.w	r2, r2, #8
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 ffe9 	bl	8004948 <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d122      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800198c:	2301      	movs	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	e014      	b.n	80019bc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fb27 	bl	8002004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3e5      	bcc.n	8001992 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 ffbc 	bl	8004948 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019da:	d13b      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e02b      	b.n	8001a3a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3340      	adds	r3, #64	; 0x40
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d115      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da12      	bge.n	8001a34 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	333f      	adds	r3, #63	; 0x3f
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fae8 	bl	8002004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3301      	adds	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3ce      	bcc.n	80019e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 ff75 	bl	8004948 <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a68:	d155      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e045      	b.n	8001afc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	015a      	lsls	r2, r3, #5
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d12e      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	da2b      	bge.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001aaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d121      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6053      	str	r3, [r2, #4]
            break;
 8001af4:	e007      	b.n	8001b06 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3301      	adds	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3b4      	bcc.n	8001a70 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 ff14 	bl	8004948 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2a:	d10a      	bne.n	8001b42 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f005 fb8b 	bl	8007248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fefe 	bl	8004948 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d115      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f005 fb7b 	bl	8007264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	e000      	b.n	8001b82 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b80:	bf00      	nop
    }
  }
}
 8001b82:	3734      	adds	r7, #52	; 0x34
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_PCD_SetAddress+0x1a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e013      	b.n	8001bca <HAL_PCD_SetAddress+0x42>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fe5c 	bl	8004878 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	4608      	mov	r0, r1
 8001bdc:	4611      	mov	r1, r2
 8001bde:	461a      	mov	r2, r3
 8001be0:	4603      	mov	r3, r0
 8001be2:	70fb      	strb	r3, [r7, #3]
 8001be4:	460b      	mov	r3, r1
 8001be6:	803b      	strh	r3, [r7, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	da0f      	bge.n	8001c18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 020f 	and.w	r2, r3, #15
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	3338      	adds	r3, #56	; 0x38
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	705a      	strb	r2, [r3, #1]
 8001c16:	e00f      	b.n	8001c38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 020f 	and.w	r2, r3, #15
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c44:	883a      	ldrh	r2, [r7, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	78ba      	ldrb	r2, [r7, #2]
 8001c4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c62:	78bb      	ldrb	r3, [r7, #2]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d102      	bne.n	8001c6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_PCD_EP_Open+0xaa>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e00e      	b.n	8001c9a <HAL_PCD_EP_Open+0xc8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fedc 	bl	8003a48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c98:	7afb      	ldrb	r3, [r7, #11]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da0f      	bge.n	8001cd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	3338      	adds	r3, #56	; 0x38
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	705a      	strb	r2, [r3, #1]
 8001cd4:	e00f      	b.n	8001cf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_EP_Close+0x6e>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e00e      	b.n	8001d2e <HAL_PCD_EP_Close+0x8c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 ff1a 	bl	8003b58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2200      	movs	r2, #0
 8001d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d78:	7afb      	ldrb	r3, [r7, #11]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d102      	bne.n	8001d92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	6979      	ldr	r1, [r7, #20]
 8001daa:	f002 f9f9 	bl	80041a0 <USB_EP0StartXfer>
 8001dae:	e008      	b.n	8001dc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	f001 ffa7 	bl	8003d10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	f003 020f 	and.w	r2, r3, #15
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3338      	adds	r3, #56	; 0x38
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2200      	movs	r2, #0
 8001e34:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6979      	ldr	r1, [r7, #20]
 8001e6e:	f002 f997 	bl	80041a0 <USB_EP0StartXfer>
 8001e72:	e008      	b.n	8001e86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	f001 ff45 	bl	8003d10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d901      	bls.n	8001eae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e050      	b.n	8001f50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da0f      	bge.n	8001ed6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	3338      	adds	r3, #56	; 0x38
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	3304      	adds	r3, #4
 8001ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	705a      	strb	r2, [r3, #1]
 8001ed4:	e00d      	b.n	8001ef2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3304      	adds	r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_EP_SetStall+0x82>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e01e      	b.n	8001f50 <HAL_PCD_EP_SetStall+0xc0>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fbd5 	bl	80046d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	b2d9      	uxtb	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f40:	461a      	mov	r2, r3
 8001f42:	f002 fdc5 	bl	8004ad0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d901      	bls.n	8001f76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e042      	b.n	8001ffc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da0f      	bge.n	8001f9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	3338      	adds	r3, #56	; 0x38
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	705a      	strb	r2, [r3, #1]
 8001f9c:	e00f      	b.n	8001fbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_PCD_EP_ClrStall+0x86>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e00e      	b.n	8001ffc <HAL_PCD_EP_ClrStall+0xa4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fbdd 	bl	80047ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002014:	2b00      	cmp	r3, #0
 8002016:	da0c      	bge.n	8002032 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	3338      	adds	r3, #56	; 0x38
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e00c      	b.n	800204c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	4618      	mov	r0, r3
 8002054:	f002 f9fc 	bl	8004450 <USB_EPStopXfer>
 8002058:	4603      	mov	r3, r0
 800205a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800205c:	7afb      	ldrb	r3, [r7, #11]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b08a      	sub	sp, #40	; 0x28
 800206a:	af02      	add	r7, sp, #8
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	3338      	adds	r3, #56	; 0x38
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	3304      	adds	r3, #4
 800208c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	429a      	cmp	r2, r3
 8002098:	d901      	bls.n	800209e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06c      	b.n	8002178 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d902      	bls.n	80020ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3303      	adds	r3, #3
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c2:	e02b      	b.n	800211c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d902      	bls.n	80020e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	3303      	adds	r3, #3
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4603      	mov	r3, r0
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f002 fa50 	bl	80045a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	441a      	add	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	441a      	add	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	b29b      	uxth	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	429a      	cmp	r2, r3
 8002130:	d809      	bhi.n	8002146 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213a:	429a      	cmp	r2, r3
 800213c:	d203      	bcs.n	8002146 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1be      	bne.n	80020c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	429a      	cmp	r2, r3
 8002150:	d811      	bhi.n	8002176 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	2201      	movs	r2, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	43db      	mvns	r3, r3
 800216c:	6939      	ldr	r1, [r7, #16]
 800216e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002172:	4013      	ands	r3, r2
 8002174:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	333c      	adds	r3, #60	; 0x3c
 8002198:	3304      	adds	r3, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d17b      	bne.n	80022ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4a61      	ldr	r2, [pc, #388]	; (8002348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	f240 80b9 	bls.w	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80b3 	beq.w	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	461a      	mov	r2, r3
 80021e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e8:	6093      	str	r3, [r2, #8]
 80021ea:	e0a7      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002202:	461a      	mov	r2, r3
 8002204:	2320      	movs	r3, #32
 8002206:	6093      	str	r3, [r2, #8]
 8002208:	e098      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 8093 	bne.w	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d90f      	bls.n	800223e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002234:	461a      	mov	r2, r3
 8002236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223a:	6093      	str	r3, [r2, #8]
 800223c:	e07e      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	0159      	lsls	r1, r3, #5
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	440b      	add	r3, r1
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	1ad2      	subs	r2, r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d114      	bne.n	80022a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002288:	461a      	mov	r2, r3
 800228a:	2101      	movs	r1, #1
 800228c:	f002 fc20 	bl	8004ad0 <USB_EP0_OutStart>
 8002290:	e006      	b.n	80022a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	441a      	add	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f004 ff0a 	bl	80070c0 <HAL_PCD_DataOutStageCallback>
 80022ac:	e046      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d124      	bne.n	8002300 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022cc:	461a      	mov	r2, r3
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	6093      	str	r3, [r2, #8]
 80022d4:	e032      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ec:	461a      	mov	r2, r3
 80022ee:	2320      	movs	r3, #32
 80022f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f004 fee1 	bl	80070c0 <HAL_PCD_DataOutStageCallback>
 80022fe:	e01d      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d114      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002328:	461a      	mov	r2, r3
 800232a:	2100      	movs	r1, #0
 800232c:	f002 fbd0 	bl	8004ad0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f004 fec2 	bl	80070c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	4f54300a 	.word	0x4f54300a
 800234c:	4f54310a 	.word	0x4f54310a

08002350 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	333c      	adds	r3, #60	; 0x3c
 8002368:	3304      	adds	r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d90e      	bls.n	80023a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	461a      	mov	r2, r3
 800239e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f004 fe79 	bl	800709c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d90c      	bls.n	80023cc <PCD_EP_OutSetupPacket_int+0x7c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023c4:	461a      	mov	r2, r3
 80023c6:	2101      	movs	r1, #1
 80023c8:	f002 fb82 	bl	8004ad0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	4f54300a 	.word	0x4f54300a

080023dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fa:	883b      	ldrh	r3, [r7, #0]
 80023fc:	0419      	lsls	r1, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	430a      	orrs	r2, r1
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
 8002408:	e028      	b.n	800245c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4413      	add	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e00d      	b.n	800243a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3340      	adds	r3, #64	; 0x40
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	3301      	adds	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	3b01      	subs	r3, #1
 8002440:	429a      	cmp	r2, r3
 8002442:	d3ec      	bcc.n	800241e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002444:	883b      	ldrh	r3, [r7, #0]
 8002446:	0418      	lsls	r0, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	3b01      	subs	r3, #1
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	4302      	orrs	r2, r0
 8002454:	3340      	adds	r3, #64	; 0x40
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e267      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d075      	beq.n	80025ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d00c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d112      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d10b      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	4b7e      	ldr	r3, [pc, #504]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05b      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d157      	bne.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e242      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x74>
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6c      	ldr	r2, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 800253c:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fa46 	bl	80009ec <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fa42 	bl	80009ec <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e207      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xc0>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fa32 	bl	80009ec <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fa2e 	bl	80009ec <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1f3      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1c7      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4937      	ldr	r1, [pc, #220]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e03a      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe f9e7 	bl	80009ec <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7fe f9e3 	bl	80009ec <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1a8      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4925      	ldr	r1, [pc, #148]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe f9c6 	bl	80009ec <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7fe f9c2 	bl	80009ec <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e187      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d036      	beq.n	80026fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe f9a6 	bl	80009ec <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe f9a2 	bl	80009ec <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e167      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x200>
 80026c2:	e01b      	b.n	80026fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7fe f98f 	bl	80009ec <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e00e      	b.n	80026f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d2:	f7fe f98b 	bl	80009ec <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d907      	bls.n	80026f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e150      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ea      	bne.n	80026d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8097 	beq.w	8002838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b81      	ldr	r3, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a7c      	ldr	r2, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b77      	ldr	r3, [pc, #476]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b74      	ldr	r3, [pc, #464]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a73      	ldr	r2, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7fe f94b 	bl	80009ec <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7fe f947 	bl	80009ec <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e10c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x2ea>
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	e01c      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x30c>
 8002796:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5e      	ldr	r2, [pc, #376]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a5b      	ldr	r2, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 80027b0:	4b58      	ldr	r3, [pc, #352]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a57      	ldr	r2, [pc, #348]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	4b55      	ldr	r3, [pc, #340]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a54      	ldr	r2, [pc, #336]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe f90c 	bl	80009ec <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe f908 	bl	80009ec <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0cb      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ee      	beq.n	80027d8 <HAL_RCC_OscConfig+0x334>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe f8f6 	bl	80009ec <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fe f8f2 	bl	80009ec <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0b5      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ee      	bne.n	8002804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a1 	beq.w	8002984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d05c      	beq.n	8002908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d141      	bne.n	80028da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe f8c6 	bl	80009ec <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe f8c2 	bl	80009ec <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e087      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe f89b 	bl	80009ec <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe f897 	bl	80009ec <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e05c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x416>
 80028d8:	e054      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe f884 	bl	80009ec <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe f880 	bl	80009ec <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e045      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x444>
 8002906:	e03d      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e038      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000
 800291c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x4ec>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d028      	beq.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d121      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d11a      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002958:	4293      	cmp	r3, r2
 800295a:	d111      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	3b01      	subs	r3, #1
 800296a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7fd ffb2 	bl	80009ec <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fd ffae 	bl	80009ec <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd ff12 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	08007708 	.word	0x08007708
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b094      	sub	sp, #80	; 0x50
 8002b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b70:	2300      	movs	r3, #0
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b78:	4b79      	ldr	r3, [pc, #484]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d00d      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	f200 80e1 	bhi.w	8002d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b92:	e0db      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b98:	e0db      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b9e:	e0d8      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be4:	0150      	lsls	r0, r2, #5
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4621      	mov	r1, r4
 8002bec:	1a51      	subs	r1, r2, r1
 8002bee:	6139      	str	r1, [r7, #16]
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c04:	4659      	mov	r1, fp
 8002c06:	018b      	lsls	r3, r1, #6
 8002c08:	4651      	mov	r1, sl
 8002c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0e:	4651      	mov	r1, sl
 8002c10:	018a      	lsls	r2, r1, #6
 8002c12:	4651      	mov	r1, sl
 8002c14:	ebb2 0801 	subs.w	r8, r2, r1
 8002c18:	4659      	mov	r1, fp
 8002c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c32:	4690      	mov	r8, r2
 8002c34:	4699      	mov	r9, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	eb18 0303 	adds.w	r3, r8, r3
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	462b      	mov	r3, r5
 8002c40:	eb49 0303 	adc.w	r3, r9, r3
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c52:	4629      	mov	r1, r5
 8002c54:	024b      	lsls	r3, r1, #9
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	024a      	lsls	r2, r1, #9
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c66:	2200      	movs	r2, #0
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c70:	f7fd fab0 	bl	80001d4 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	e058      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	2200      	movs	r2, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	4611      	mov	r1, r2
 8002c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	0159      	lsls	r1, r3, #5
 8002ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002caa:	0150      	lsls	r0, r2, #5
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	00eb      	lsls	r3, r5, #3
 8002ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce6:	00e2      	lsls	r2, r4, #3
 8002ce8:	4614      	mov	r4, r2
 8002cea:	461d      	mov	r5, r3
 8002cec:	4643      	mov	r3, r8
 8002cee:	18e3      	adds	r3, r4, r3
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	eb45 0303 	adc.w	r3, r5, r3
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d06:	4629      	mov	r1, r5
 8002d08:	028b      	lsls	r3, r1, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d10:	4621      	mov	r1, r4
 8002d12:	028a      	lsls	r2, r1, #10
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	61fa      	str	r2, [r7, #28]
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	f7fd fa56 	bl	80001d4 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3750      	adds	r7, #80	; 0x50
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000000 	.word	0x20000000

08002d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d88:	f7ff fff0 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0a9b      	lsrs	r3, r3, #10
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	08007718 	.word	0x08007718

08002dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db0:	f7ff ffdc 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	0b5b      	lsrs	r3, r3, #13
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	08007718 	.word	0x08007718

08002dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e03f      	b.n	8002e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fcd8 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2224      	movs	r2, #36	; 0x24
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f829 	bl	8002e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b0c0      	sub	sp, #256	; 0x100
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	68d9      	ldr	r1, [r3, #12]
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	ea40 0301 	orr.w	r3, r0, r1
 8002e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ec8:	f021 010c 	bic.w	r1, r1, #12
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eea:	6999      	ldr	r1, [r3, #24]
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	ea40 0301 	orr.w	r3, r0, r1
 8002ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b8f      	ldr	r3, [pc, #572]	; (800313c <UART_SetConfig+0x2cc>)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d005      	beq.n	8002f10 <UART_SetConfig+0xa0>
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b8d      	ldr	r3, [pc, #564]	; (8003140 <UART_SetConfig+0x2d0>)
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d104      	bne.n	8002f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f10:	f7ff ff4c 	bl	8002dac <HAL_RCC_GetPCLK2Freq>
 8002f14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f18:	e003      	b.n	8002f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f1a:	f7ff ff33 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8002f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2c:	f040 810c 	bne.w	8003148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f42:	4622      	mov	r2, r4
 8002f44:	462b      	mov	r3, r5
 8002f46:	1891      	adds	r1, r2, r2
 8002f48:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f4a:	415b      	adcs	r3, r3
 8002f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f52:	4621      	mov	r1, r4
 8002f54:	eb12 0801 	adds.w	r8, r2, r1
 8002f58:	4629      	mov	r1, r5
 8002f5a:	eb43 0901 	adc.w	r9, r3, r1
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f72:	4690      	mov	r8, r2
 8002f74:	4699      	mov	r9, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	eb18 0303 	adds.w	r3, r8, r3
 8002f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f80:	462b      	mov	r3, r5
 8002f82:	eb49 0303 	adc.w	r3, r9, r3
 8002f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	18db      	adds	r3, r3, r3
 8002fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	eb42 0303 	adc.w	r3, r2, r3
 8002faa:	657b      	str	r3, [r7, #84]	; 0x54
 8002fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fb4:	f7fd f90e 	bl	80001d4 <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4b61      	ldr	r3, [pc, #388]	; (8003144 <UART_SetConfig+0x2d4>)
 8002fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	011c      	lsls	r4, r3, #4
 8002fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	1891      	adds	r1, r2, r2
 8002fde:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fe0:	415b      	adcs	r3, r3
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fe8:	4641      	mov	r1, r8
 8002fea:	eb12 0a01 	adds.w	sl, r2, r1
 8002fee:	4649      	mov	r1, r9
 8002ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003008:	4692      	mov	sl, r2
 800300a:	469b      	mov	fp, r3
 800300c:	4643      	mov	r3, r8
 800300e:	eb1a 0303 	adds.w	r3, sl, r3
 8003012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003016:	464b      	mov	r3, r9
 8003018:	eb4b 0303 	adc.w	r3, fp, r3
 800301c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800302c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003034:	460b      	mov	r3, r1
 8003036:	18db      	adds	r3, r3, r3
 8003038:	643b      	str	r3, [r7, #64]	; 0x40
 800303a:	4613      	mov	r3, r2
 800303c:	eb42 0303 	adc.w	r3, r2, r3
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
 8003042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800304a:	f7fd f8c3 	bl	80001d4 <__aeabi_uldivmod>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4611      	mov	r1, r2
 8003054:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <UART_SetConfig+0x2d4>)
 8003056:	fba3 2301 	umull	r2, r3, r3, r1
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2264      	movs	r2, #100	; 0x64
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	1acb      	subs	r3, r1, r3
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800306a:	4b36      	ldr	r3, [pc, #216]	; (8003144 <UART_SetConfig+0x2d4>)
 800306c:	fba3 2302 	umull	r2, r3, r3, r2
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003078:	441c      	add	r4, r3
 800307a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800307e:	2200      	movs	r2, #0
 8003080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003084:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800308c:	4642      	mov	r2, r8
 800308e:	464b      	mov	r3, r9
 8003090:	1891      	adds	r1, r2, r2
 8003092:	63b9      	str	r1, [r7, #56]	; 0x38
 8003094:	415b      	adcs	r3, r3
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800309c:	4641      	mov	r1, r8
 800309e:	1851      	adds	r1, r2, r1
 80030a0:	6339      	str	r1, [r7, #48]	; 0x30
 80030a2:	4649      	mov	r1, r9
 80030a4:	414b      	adcs	r3, r1
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030b4:	4659      	mov	r1, fp
 80030b6:	00cb      	lsls	r3, r1, #3
 80030b8:	4651      	mov	r1, sl
 80030ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030be:	4651      	mov	r1, sl
 80030c0:	00ca      	lsls	r2, r1, #3
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	4642      	mov	r2, r8
 80030ca:	189b      	adds	r3, r3, r2
 80030cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030d0:	464b      	mov	r3, r9
 80030d2:	460a      	mov	r2, r1
 80030d4:	eb42 0303 	adc.w	r3, r2, r3
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030f0:	460b      	mov	r3, r1
 80030f2:	18db      	adds	r3, r3, r3
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f6:	4613      	mov	r3, r2
 80030f8:	eb42 0303 	adc.w	r3, r2, r3
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003106:	f7fd f865 	bl	80001d4 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <UART_SetConfig+0x2d4>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	3332      	adds	r3, #50	; 0x32
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <UART_SetConfig+0x2d4>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4422      	add	r2, r4
 8003136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003138:	e105      	b.n	8003346 <UART_SetConfig+0x4d6>
 800313a:	bf00      	nop
 800313c:	40011000 	.word	0x40011000
 8003140:	40011400 	.word	0x40011400
 8003144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800314c:	2200      	movs	r2, #0
 800314e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003152:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800315a:	4642      	mov	r2, r8
 800315c:	464b      	mov	r3, r9
 800315e:	1891      	adds	r1, r2, r2
 8003160:	6239      	str	r1, [r7, #32]
 8003162:	415b      	adcs	r3, r3
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800316a:	4641      	mov	r1, r8
 800316c:	1854      	adds	r4, r2, r1
 800316e:	4649      	mov	r1, r9
 8003170:	eb43 0501 	adc.w	r5, r3, r1
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	00eb      	lsls	r3, r5, #3
 800317e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003182:	00e2      	lsls	r2, r4, #3
 8003184:	4614      	mov	r4, r2
 8003186:	461d      	mov	r5, r3
 8003188:	4643      	mov	r3, r8
 800318a:	18e3      	adds	r3, r4, r3
 800318c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003190:	464b      	mov	r3, r9
 8003192:	eb45 0303 	adc.w	r3, r5, r3
 8003196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031b6:	4629      	mov	r1, r5
 80031b8:	008b      	lsls	r3, r1, #2
 80031ba:	4621      	mov	r1, r4
 80031bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c0:	4621      	mov	r1, r4
 80031c2:	008a      	lsls	r2, r1, #2
 80031c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031c8:	f7fd f804 	bl	80001d4 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4b60      	ldr	r3, [pc, #384]	; (8003354 <UART_SetConfig+0x4e4>)
 80031d2:	fba3 2302 	umull	r2, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	011c      	lsls	r4, r3, #4
 80031da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031ec:	4642      	mov	r2, r8
 80031ee:	464b      	mov	r3, r9
 80031f0:	1891      	adds	r1, r2, r2
 80031f2:	61b9      	str	r1, [r7, #24]
 80031f4:	415b      	adcs	r3, r3
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031fc:	4641      	mov	r1, r8
 80031fe:	1851      	adds	r1, r2, r1
 8003200:	6139      	str	r1, [r7, #16]
 8003202:	4649      	mov	r1, r9
 8003204:	414b      	adcs	r3, r1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003214:	4659      	mov	r1, fp
 8003216:	00cb      	lsls	r3, r1, #3
 8003218:	4651      	mov	r1, sl
 800321a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321e:	4651      	mov	r1, sl
 8003220:	00ca      	lsls	r2, r1, #3
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	4603      	mov	r3, r0
 8003228:	4642      	mov	r2, r8
 800322a:	189b      	adds	r3, r3, r2
 800322c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003230:	464b      	mov	r3, r9
 8003232:	460a      	mov	r2, r1
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	67bb      	str	r3, [r7, #120]	; 0x78
 8003246:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003254:	4649      	mov	r1, r9
 8003256:	008b      	lsls	r3, r1, #2
 8003258:	4641      	mov	r1, r8
 800325a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800325e:	4641      	mov	r1, r8
 8003260:	008a      	lsls	r2, r1, #2
 8003262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003266:	f7fc ffb5 	bl	80001d4 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <UART_SetConfig+0x4e4>)
 8003270:	fba3 1302 	umull	r1, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	2164      	movs	r1, #100	; 0x64
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	3332      	adds	r3, #50	; 0x32
 8003282:	4a34      	ldr	r2, [pc, #208]	; (8003354 <UART_SetConfig+0x4e4>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328e:	441c      	add	r4, r3
 8003290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003294:	2200      	movs	r2, #0
 8003296:	673b      	str	r3, [r7, #112]	; 0x70
 8003298:	677a      	str	r2, [r7, #116]	; 0x74
 800329a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800329e:	4642      	mov	r2, r8
 80032a0:	464b      	mov	r3, r9
 80032a2:	1891      	adds	r1, r2, r2
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	415b      	adcs	r3, r3
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ae:	4641      	mov	r1, r8
 80032b0:	1851      	adds	r1, r2, r1
 80032b2:	6039      	str	r1, [r7, #0]
 80032b4:	4649      	mov	r1, r9
 80032b6:	414b      	adcs	r3, r1
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032c6:	4659      	mov	r1, fp
 80032c8:	00cb      	lsls	r3, r1, #3
 80032ca:	4651      	mov	r1, sl
 80032cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d0:	4651      	mov	r1, sl
 80032d2:	00ca      	lsls	r2, r1, #3
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	4603      	mov	r3, r0
 80032da:	4642      	mov	r2, r8
 80032dc:	189b      	adds	r3, r3, r2
 80032de:	66bb      	str	r3, [r7, #104]	; 0x68
 80032e0:	464b      	mov	r3, r9
 80032e2:	460a      	mov	r2, r1
 80032e4:	eb42 0303 	adc.w	r3, r2, r3
 80032e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	663b      	str	r3, [r7, #96]	; 0x60
 80032f4:	667a      	str	r2, [r7, #100]	; 0x64
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003302:	4649      	mov	r1, r9
 8003304:	008b      	lsls	r3, r1, #2
 8003306:	4641      	mov	r1, r8
 8003308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330c:	4641      	mov	r1, r8
 800330e:	008a      	lsls	r2, r1, #2
 8003310:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003314:	f7fc ff5e 	bl	80001d4 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <UART_SetConfig+0x4e4>)
 800331e:	fba3 1302 	umull	r1, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2164      	movs	r1, #100	; 0x64
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	; 0x32
 8003330:	4a08      	ldr	r2, [pc, #32]	; (8003354 <UART_SetConfig+0x4e4>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 020f 	and.w	r2, r3, #15
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4422      	add	r2, r4
 8003344:	609a      	str	r2, [r3, #8]
}
 8003346:	bf00      	nop
 8003348:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003352:	bf00      	nop
 8003354:	51eb851f 	.word	0x51eb851f

08003358 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003358:	b084      	sub	sp, #16
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	f107 001c 	add.w	r0, r7, #28
 8003366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	2b01      	cmp	r3, #1
 800336e:	d122      	bne.n	80033b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f001 fbee 	bl	8004b8c <USB_CoreReset>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e01a      	b.n	80033ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f001 fbe2 	bl	8004b8c <USB_CoreReset>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38
 80033de:	e005      	b.n	80033ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10b      	bne.n	800340a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f043 0206 	orr.w	r2, r3, #6
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003416:	b004      	add	sp, #16
 8003418:	4770      	bx	lr
	...

0800341c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d165      	bne.n	80034fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a41      	ldr	r2, [pc, #260]	; (8003538 <USB_SetTurnaroundTime+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d906      	bls.n	8003446 <USB_SetTurnaroundTime+0x2a>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <USB_SetTurnaroundTime+0x120>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d202      	bcs.n	8003446 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003440:	230f      	movs	r3, #15
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e062      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4a3c      	ldr	r2, [pc, #240]	; (800353c <USB_SetTurnaroundTime+0x120>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d306      	bcc.n	800345c <USB_SetTurnaroundTime+0x40>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4a3b      	ldr	r2, [pc, #236]	; (8003540 <USB_SetTurnaroundTime+0x124>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d202      	bcs.n	800345c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003456:	230e      	movs	r3, #14
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e057      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a38      	ldr	r2, [pc, #224]	; (8003540 <USB_SetTurnaroundTime+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d306      	bcc.n	8003472 <USB_SetTurnaroundTime+0x56>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4a37      	ldr	r2, [pc, #220]	; (8003544 <USB_SetTurnaroundTime+0x128>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d202      	bcs.n	8003472 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800346c:	230d      	movs	r3, #13
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e04c      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4a33      	ldr	r2, [pc, #204]	; (8003544 <USB_SetTurnaroundTime+0x128>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d306      	bcc.n	8003488 <USB_SetTurnaroundTime+0x6c>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a32      	ldr	r2, [pc, #200]	; (8003548 <USB_SetTurnaroundTime+0x12c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d802      	bhi.n	8003488 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003482:	230c      	movs	r3, #12
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e041      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4a2f      	ldr	r2, [pc, #188]	; (8003548 <USB_SetTurnaroundTime+0x12c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d906      	bls.n	800349e <USB_SetTurnaroundTime+0x82>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a2e      	ldr	r2, [pc, #184]	; (800354c <USB_SetTurnaroundTime+0x130>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d802      	bhi.n	800349e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003498:	230b      	movs	r3, #11
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e036      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4a2a      	ldr	r2, [pc, #168]	; (800354c <USB_SetTurnaroundTime+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d906      	bls.n	80034b4 <USB_SetTurnaroundTime+0x98>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <USB_SetTurnaroundTime+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d802      	bhi.n	80034b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034ae:	230a      	movs	r3, #10
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e02b      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <USB_SetTurnaroundTime+0x134>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d906      	bls.n	80034ca <USB_SetTurnaroundTime+0xae>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <USB_SetTurnaroundTime+0x138>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d202      	bcs.n	80034ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034c4:	2309      	movs	r3, #9
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e020      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <USB_SetTurnaroundTime+0x138>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d306      	bcc.n	80034e0 <USB_SetTurnaroundTime+0xc4>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4a20      	ldr	r2, [pc, #128]	; (8003558 <USB_SetTurnaroundTime+0x13c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d802      	bhi.n	80034e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034da:	2308      	movs	r3, #8
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e015      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <USB_SetTurnaroundTime+0x13c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d906      	bls.n	80034f6 <USB_SetTurnaroundTime+0xda>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4a1c      	ldr	r2, [pc, #112]	; (800355c <USB_SetTurnaroundTime+0x140>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d202      	bcs.n	80034f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034f0:	2307      	movs	r3, #7
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e00a      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034f6:	2306      	movs	r3, #6
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e007      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003502:	2309      	movs	r3, #9
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e001      	b.n	800350c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003508:	2309      	movs	r3, #9
 800350a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	029b      	lsls	r3, r3, #10
 8003520:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	00d8acbf 	.word	0x00d8acbf
 800353c:	00e4e1c0 	.word	0x00e4e1c0
 8003540:	00f42400 	.word	0x00f42400
 8003544:	01067380 	.word	0x01067380
 8003548:	011a499f 	.word	0x011a499f
 800354c:	01312cff 	.word	0x01312cff
 8003550:	014ca43f 	.word	0x014ca43f
 8003554:	016e3600 	.word	0x016e3600
 8003558:	01a6ab1f 	.word	0x01a6ab1f
 800355c:	01e84800 	.word	0x01e84800

08003560 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d115      	bne.n	80035f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7fd fa16 	bl	8000a04 <HAL_Delay>
      ms++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 fa45 	bl	8004a6e <USB_GetMode>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d01e      	beq.n	8003628 <USB_SetCurrentMode+0x84>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b31      	cmp	r3, #49	; 0x31
 80035ee:	d9f0      	bls.n	80035d2 <USB_SetCurrentMode+0x2e>
 80035f0:	e01a      	b.n	8003628 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d115      	bne.n	8003624 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003604:	2001      	movs	r0, #1
 8003606:	f7fd f9fd 	bl	8000a04 <HAL_Delay>
      ms++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 fa2c 	bl	8004a6e <USB_GetMode>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <USB_SetCurrentMode+0x84>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b31      	cmp	r3, #49	; 0x31
 8003620:	d9f0      	bls.n	8003604 <USB_SetCurrentMode+0x60>
 8003622:	e001      	b.n	8003628 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e005      	b.n	8003634 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b32      	cmp	r3, #50	; 0x32
 800362c:	d101      	bne.n	8003632 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800363c:	b084      	sub	sp, #16
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800364a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	e009      	b.n	8003670 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3340      	adds	r3, #64	; 0x40
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	2200      	movs	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	3301      	adds	r3, #1
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b0e      	cmp	r3, #14
 8003674:	d9f2      	bls.n	800365c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11c      	bne.n	80036b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
 80036b4:	e00b      	b.n	80036ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036d4:	461a      	mov	r2, r3
 80036d6:	2300      	movs	r3, #0
 80036d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	4619      	mov	r1, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	461a      	mov	r2, r3
 80036ea:	680b      	ldr	r3, [r1, #0]
 80036ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10c      	bne.n	800370e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036fa:	2100      	movs	r1, #0
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f965 	bl	80039cc <USB_SetDevSpeed>
 8003702:	e008      	b.n	8003716 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003704:	2101      	movs	r1, #1
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f960 	bl	80039cc <USB_SetDevSpeed>
 800370c:	e003      	b.n	8003716 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800370e:	2103      	movs	r1, #3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f95b 	bl	80039cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003716:	2110      	movs	r1, #16
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8f3 	bl	8003904 <USB_FlushTxFifo>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f91f 	bl	800396c <USB_FlushRxFifo>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	461a      	mov	r2, r3
 8003740:	2300      	movs	r3, #0
 8003742:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003756:	461a      	mov	r2, r3
 8003758:	2300      	movs	r3, #0
 800375a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	e043      	b.n	80037ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003778:	d118      	bne.n	80037ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378c:	461a      	mov	r2, r3
 800378e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e013      	b.n	80037be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	461a      	mov	r2, r3
 80037a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e008      	b.n	80037be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	461a      	mov	r2, r3
 80037ba:	2300      	movs	r3, #0
 80037bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	461a      	mov	r2, r3
 80037cc:	2300      	movs	r3, #0
 80037ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	3301      	adds	r3, #1
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3b7      	bcc.n	8003762 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	e043      	b.n	8003880 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800380a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800380e:	d118      	bne.n	8003842 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003822:	461a      	mov	r2, r3
 8003824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e013      	b.n	8003854 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e008      	b.n	8003854 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	2300      	movs	r3, #0
 8003852:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	2300      	movs	r3, #0
 8003864:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3301      	adds	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3b7      	bcc.n	80037f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f043 0210 	orr.w	r2, r3, #16
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <USB_DevInit+0x2c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f043 0208 	orr.w	r2, r3, #8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038fc:	b004      	add	sp, #16
 80038fe:	4770      	bx	lr
 8003900:	803c3800 	.word	0x803c3800

08003904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <USB_FlushTxFifo+0x64>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e01b      	b.n	800395c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	daf2      	bge.n	8003912 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	019b      	lsls	r3, r3, #6
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3301      	adds	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a08      	ldr	r2, [pc, #32]	; (8003968 <USB_FlushTxFifo+0x64>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e006      	b.n	800395c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d0f0      	beq.n	800393c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	00030d40 	.word	0x00030d40

0800396c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3301      	adds	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a11      	ldr	r2, [pc, #68]	; (80039c8 <USB_FlushRxFifo+0x5c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e018      	b.n	80039bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	daf2      	bge.n	8003978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2210      	movs	r2, #16
 800399a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <USB_FlushRxFifo+0x5c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e006      	b.n	80039bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d0f0      	beq.n	800399c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	00030d40 	.word	0x00030d40

080039cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	68f9      	ldr	r1, [r7, #12]
 80039e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0306 	and.w	r3, r3, #6
 8003a16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d102      	bne.n	8003a24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
 8003a22:	e00a      	b.n	8003a3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d002      	beq.n	8003a30 <USB_GetDevSpeed+0x32>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2b06      	cmp	r3, #6
 8003a2e:	d102      	bne.n	8003a36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a30:	2302      	movs	r3, #2
 8003a32:	75fb      	strb	r3, [r7, #23]
 8003a34:	e001      	b.n	8003a3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a36:	230f      	movs	r3, #15
 8003a38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d13a      	bne.n	8003ada <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	2101      	movs	r1, #1
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d155      	bne.n	8003b48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	791b      	ldrb	r3, [r3, #4]
 8003ab6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	059b      	lsls	r3, r3, #22
 8003abe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e036      	b.n	8003b48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11a      	bne.n	8003b48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	791b      	ldrb	r3, [r3, #4]
 8003b2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d161      	bne.n	8003c38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b8a:	d11f      	bne.n	8003bcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	0151      	lsls	r1, r2, #5
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003baa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bec:	4013      	ands	r3, r2
 8003bee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	2101      	movs	r1, #1
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c10:	4013      	ands	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	0159      	lsls	r1, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	440b      	add	r3, r1
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <USB_DeactivateEndpoint+0x1b0>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
 8003c36:	e060      	b.n	8003cfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c4e:	d11f      	bne.n	8003c90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	68f9      	ldr	r1, [r7, #12]
 8003cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	0159      	lsls	r1, r3, #5
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <USB_DeactivateEndpoint+0x1b4>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	ec337800 	.word	0xec337800
 8003d0c:	eff37800 	.word	0xeff37800

08003d10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	f040 815c 	bne.w	8003fea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d132      	bne.n	8003da0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	0151      	lsls	r1, r2, #5
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	440a      	add	r2, r1
 8003d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d98:	0cdb      	lsrs	r3, r3, #19
 8003d9a:	04db      	lsls	r3, r3, #19
 8003d9c:	6113      	str	r3, [r2, #16]
 8003d9e:	e074      	b.n	8003e8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	0151      	lsls	r1, r2, #5
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	440a      	add	r2, r1
 8003db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dba:	0cdb      	lsrs	r3, r3, #19
 8003dbc:	04db      	lsls	r3, r3, #19
 8003dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003dde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003de2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6999      	ldr	r1, [r3, #24]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	440b      	add	r3, r1
 8003dfc:	1e59      	subs	r1, r3, #1
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e06:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e08:	4b9d      	ldr	r3, [pc, #628]	; (8004080 <USB_EPStartXfer+0x370>)
 8003e0a:	400b      	ands	r3, r1
 8003e0c:	69b9      	ldr	r1, [r7, #24]
 8003e0e:	0148      	lsls	r0, r1, #5
 8003e10:	69f9      	ldr	r1, [r7, #28]
 8003e12:	4401      	add	r1, r0
 8003e14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	0148      	lsls	r0, r1, #5
 8003e36:	69f9      	ldr	r1, [r7, #28]
 8003e38:	4401      	add	r1, r0
 8003e3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	791b      	ldrb	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d11f      	bne.n	8003e8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d14b      	bne.n	8003f28 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d128      	bne.n	8003f06 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d110      	bne.n	8003ee6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e00f      	b.n	8003f06 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e133      	b.n	8004190 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	791b      	ldrb	r3, [r3, #4]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d015      	beq.n	8003f7c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 811b 	beq.w	8004190 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f70:	69f9      	ldr	r1, [r7, #28]
 8003f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f76:	4313      	orrs	r3, r2
 8003f78:	634b      	str	r3, [r1, #52]	; 0x34
 8003f7a:	e109      	b.n	8004190 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d110      	bne.n	8003fae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e00f      	b.n	8003fce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6919      	ldr	r1, [r3, #16]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	b298      	uxth	r0, r3
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fade 	bl	80045a4 <USB_WritePacket>
 8003fe8:	e0d2      	b.n	8004190 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004004:	0cdb      	lsrs	r3, r3, #19
 8004006:	04db      	lsls	r3, r3, #19
 8004008:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004024:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004028:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800402c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d126      	bne.n	8004084 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	0148      	lsls	r0, r1, #5
 8004050:	69f9      	ldr	r1, [r7, #28]
 8004052:	4401      	add	r1, r0
 8004054:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004058:	4313      	orrs	r3, r2
 800405a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004076:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800407a:	6113      	str	r3, [r2, #16]
 800407c:	e03a      	b.n	80040f4 <USB_EPStartXfer+0x3e4>
 800407e:	bf00      	nop
 8004080:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4413      	add	r3, r2
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	8afa      	ldrh	r2, [r7, #22]
 80040a0:	fb03 f202 	mul.w	r2, r3, r2
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	8afb      	ldrh	r3, [r7, #22]
 80040b8:	04d9      	lsls	r1, r3, #19
 80040ba:	4b38      	ldr	r3, [pc, #224]	; (800419c <USB_EPStartXfer+0x48c>)
 80040bc:	400b      	ands	r3, r1
 80040be:	69b9      	ldr	r1, [r7, #24]
 80040c0:	0148      	lsls	r0, r1, #5
 80040c2:	69f9      	ldr	r1, [r7, #28]
 80040c4:	4401      	add	r1, r0
 80040c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	0148      	lsls	r0, r1, #5
 80040e8:	69f9      	ldr	r1, [r7, #28]
 80040ea:	4401      	add	r1, r0
 80040ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040f0:	4313      	orrs	r3, r2
 80040f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10d      	bne.n	8004116 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	6919      	ldr	r1, [r3, #16]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	460a      	mov	r2, r1
 8004114:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d128      	bne.n	8004170 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d110      	bne.n	8004150 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	0151      	lsls	r1, r2, #5
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	440a      	add	r2, r1
 8004144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e00f      	b.n	8004170 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	0151      	lsls	r1, r2, #5
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	440a      	add	r2, r1
 8004166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	440a      	add	r2, r1
 8004186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800418e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	1ff80000 	.word	0x1ff80000

080041a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 80ce 	bne.w	800435e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d132      	bne.n	8004230 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800420c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004228:	0cdb      	lsrs	r3, r3, #19
 800422a:	04db      	lsls	r3, r3, #19
 800422c:	6113      	str	r3, [r2, #16]
 800422e:	e04e      	b.n	80042ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	440a      	add	r2, r1
 8004246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424a:	0cdb      	lsrs	r3, r3, #19
 800424c:	04db      	lsls	r3, r3, #19
 800424e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	440a      	add	r2, r1
 8004266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800426e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004272:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042be:	6939      	ldr	r1, [r7, #16]
 80042c0:	0148      	lsls	r0, r1, #5
 80042c2:	6979      	ldr	r1, [r7, #20]
 80042c4:	4401      	add	r1, r0
 80042c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ca:	4313      	orrs	r3, r2
 80042cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d11e      	bne.n	8004312 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e8:	461a      	mov	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e097      	b.n	8004442 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004330:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8083 	beq.w	8004442 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004358:	4313      	orrs	r3, r2
 800435a:	634b      	str	r3, [r1, #52]	; 0x34
 800435c:	e071      	b.n	8004442 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004378:	0cdb      	lsrs	r3, r3, #19
 800437a:	04db      	lsls	r3, r3, #19
 800437c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004398:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800439c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	0151      	lsls	r1, r2, #5
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	440a      	add	r2, r1
 80043d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	6939      	ldr	r1, [r7, #16]
 80043f2:	0148      	lsls	r0, r1, #5
 80043f4:	6979      	ldr	r1, [r7, #20]
 80043f6:	4401      	add	r1, r0
 80043f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043fc:	4313      	orrs	r3, r2
 80043fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10d      	bne.n	8004422 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6919      	ldr	r1, [r3, #16]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	460a      	mov	r2, r1
 8004420:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800443c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004440:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d14a      	bne.n	8004504 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004486:	f040 8086 	bne.w	8004596 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	0151      	lsls	r1, r2, #5
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	440a      	add	r2, r1
 80044a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	7812      	ldrb	r2, [r2, #0]
 80044c2:	0151      	lsls	r1, r2, #5
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	440a      	add	r2, r1
 80044c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f242 7210 	movw	r2, #10000	; 0x2710
 80044de:	4293      	cmp	r3, r2
 80044e0:	d902      	bls.n	80044e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
          break;
 80044e6:	e056      	b.n	8004596 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004500:	d0e7      	beq.n	80044d2 <USB_EPStopXfer+0x82>
 8004502:	e048      	b.n	8004596 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451c:	d13b      	bne.n	8004596 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	7812      	ldrb	r2, [r2, #0]
 8004532:	0151      	lsls	r1, r2, #5
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	440a      	add	r2, r1
 8004538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800453c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004540:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004564:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004572:	4293      	cmp	r3, r2
 8004574:	d902      	bls.n	800457c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
          break;
 800457a:	e00c      	b.n	8004596 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004594:	d0e7      	beq.n	8004566 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004596:	7dfb      	ldrb	r3, [r7, #23]
}
 8004598:	4618      	mov	r0, r3
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4611      	mov	r1, r2
 80045b0:	461a      	mov	r2, r3
 80045b2:	460b      	mov	r3, r1
 80045b4:	71fb      	strb	r3, [r7, #7]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80045c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d123      	bne.n	8004612 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045ca:	88bb      	ldrh	r3, [r7, #4]
 80045cc:	3303      	adds	r3, #3
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e018      	b.n	800460a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	031a      	lsls	r2, r3, #12
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e4:	461a      	mov	r2, r3
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	3301      	adds	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3301      	adds	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	3301      	adds	r3, #1
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	429a      	cmp	r2, r3
 8004610:	d3e2      	bcc.n	80045d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3724      	adds	r7, #36	; 0x24
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004620:	b480      	push	{r7}
 8004622:	b08b      	sub	sp, #44	; 0x2c
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	b29b      	uxth	r3, r3
 800463c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
 800464a:	e014      	b.n	8004676 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	601a      	str	r2, [r3, #0]
    pDest++;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	3301      	adds	r3, #1
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	3301      	adds	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	3301      	adds	r3, #1
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	3301      	adds	r3, #1
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	3301      	adds	r3, #1
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	429a      	cmp	r2, r3
 800467c:	d3e6      	bcc.n	800464c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800467e:	8bfb      	ldrh	r3, [r7, #30]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01e      	beq.n	80046c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468e:	461a      	mov	r2, r3
 8004690:	f107 0310 	add.w	r3, r7, #16
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	701a      	strb	r2, [r3, #0]
      i++;
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	3301      	adds	r3, #1
 80046ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	3301      	adds	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80046b6:	8bfb      	ldrh	r3, [r7, #30]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80046bc:	8bfb      	ldrh	r3, [r7, #30]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ea      	bne.n	8004698 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	372c      	adds	r7, #44	; 0x2c
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d12c      	bne.n	8004746 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	db12      	blt.n	8004724 <USB_EPSetStall+0x54>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00f      	beq.n	8004724 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	440a      	add	r2, r1
 800471a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004722:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e02b      	b.n	800479e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	db12      	blt.n	800477e <USB_EPSetStall+0xae>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00f      	beq.n	800477e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004778:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800477c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800479c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d128      	bne.n	800481a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	0151      	lsls	r1, r2, #5
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	440a      	add	r2, r1
 80047de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	791b      	ldrb	r3, [r3, #4]
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d003      	beq.n	80047f8 <USB_EPClearStall+0x4c>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	791b      	ldrb	r3, [r3, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d138      	bne.n	800486a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	e027      	b.n	800486a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004838:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	791b      	ldrb	r3, [r3, #4]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d003      	beq.n	800484a <USB_EPClearStall+0x9e>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	791b      	ldrb	r3, [r3, #4]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d10f      	bne.n	800486a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004896:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800489a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80048ac:	68f9      	ldr	r1, [r7, #12]
 80048ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f2:	f023 0302 	bic.w	r3, r3, #2
 80048f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004920:	f023 0303 	bic.w	r3, r3, #3
 8004924:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004960:	68fb      	ldr	r3, [r7, #12]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	0c1b      	lsrs	r3, r3, #16
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	4013      	ands	r3, r2
 80049c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	b29b      	uxth	r3, r3
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	460b      	mov	r3, r1
 80049e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a04:	68bb      	ldr	r3, [r7, #8]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a42:	01db      	lsls	r3, r3, #7
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a60:	68bb      	ldr	r3, [r7, #8]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004aa8:	f023 0307 	bic.w	r3, r3, #7
 8004aac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	333c      	adds	r3, #60	; 0x3c
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <USB_EP0_OutStart+0xb8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d90a      	bls.n	8004b0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b04:	d101      	bne.n	8004b0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e037      	b.n	8004b7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b38:	f043 0318 	orr.w	r3, r3, #24
 8004b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b52:	7afb      	ldrb	r3, [r7, #11]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d10f      	bne.n	8004b78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	4f54300a 	.word	0x4f54300a

08004b8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <USB_CoreReset+0x64>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e01b      	b.n	8004be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	daf2      	bge.n	8004b98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <USB_CoreReset+0x64>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e006      	b.n	8004be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d0f0      	beq.n	8004bc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	00030d40 	.word	0x00030d40

08004bf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c04:	f002 fcc6 	bl	8007594 <USBD_static_malloc>
 8004c08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	32b0      	adds	r2, #176	; 0xb0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c20:	2302      	movs	r3, #2
 8004c22:	e0d4      	b.n	8004dce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c24:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004c28:	2100      	movs	r1, #0
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f002 fd28 	bl	8007680 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	32b0      	adds	r2, #176	; 0xb0
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	32b0      	adds	r2, #176	; 0xb0
 8004c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	7c1b      	ldrb	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d138      	bne.n	8004cce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c5c:	4b5e      	ldr	r3, [pc, #376]	; (8004dd8 <USBD_CDC_Init+0x1e4>)
 8004c5e:	7819      	ldrb	r1, [r3, #0]
 8004c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c64:	2202      	movs	r2, #2
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f002 fb71 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <USBD_CDC_Init+0x1e4>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	3324      	adds	r3, #36	; 0x24
 8004c82:	2201      	movs	r2, #1
 8004c84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c86:	4b55      	ldr	r3, [pc, #340]	; (8004ddc <USBD_CDC_Init+0x1e8>)
 8004c88:	7819      	ldrb	r1, [r3, #0]
 8004c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8e:	2202      	movs	r2, #2
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f002 fb5c 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c96:	4b51      	ldr	r3, [pc, #324]	; (8004ddc <USBD_CDC_Init+0x1e8>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	f003 020f 	and.w	r2, r3, #15
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004cae:	2201      	movs	r2, #1
 8004cb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004cb2:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <USBD_CDC_Init+0x1ec>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f003 020f 	and.w	r2, r3, #15
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3326      	adds	r3, #38	; 0x26
 8004cc8:	2210      	movs	r2, #16
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e035      	b.n	8004d3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004cce:	4b42      	ldr	r3, [pc, #264]	; (8004dd8 <USBD_CDC_Init+0x1e4>)
 8004cd0:	7819      	ldrb	r1, [r3, #0]
 8004cd2:	2340      	movs	r3, #64	; 0x40
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f002 fb39 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <USBD_CDC_Init+0x1e4>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3324      	adds	r3, #36	; 0x24
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <USBD_CDC_Init+0x1e8>)
 8004cf8:	7819      	ldrb	r1, [r3, #0]
 8004cfa:	2340      	movs	r3, #64	; 0x40
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f002 fb25 	bl	800734e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <USBD_CDC_Init+0x1e8>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f003 020f 	and.w	r2, r3, #15
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d20:	4b2f      	ldr	r3, [pc, #188]	; (8004de0 <USBD_CDC_Init+0x1ec>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3326      	adds	r3, #38	; 0x26
 8004d36:	2210      	movs	r2, #16
 8004d38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d3a:	4b29      	ldr	r3, [pc, #164]	; (8004de0 <USBD_CDC_Init+0x1ec>)
 8004d3c:	7819      	ldrb	r1, [r3, #0]
 8004d3e:	2308      	movs	r3, #8
 8004d40:	2203      	movs	r2, #3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f002 fb03 	bl	800734e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <USBD_CDC_Init+0x1ec>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	f003 020f 	and.w	r2, r3, #15
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3324      	adds	r3, #36	; 0x24
 8004d5e:	2201      	movs	r2, #1
 8004d60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	33b0      	adds	r3, #176	; 0xb0
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e018      	b.n	8004dce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7c1b      	ldrb	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004da4:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <USBD_CDC_Init+0x1e8>)
 8004da6:	7819      	ldrb	r1, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f002 fbba 	bl	800752c <USBD_LL_PrepareReceive>
 8004db8:	e008      	b.n	8004dcc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <USBD_CDC_Init+0x1e8>)
 8004dbc:	7819      	ldrb	r1, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dc4:	2340      	movs	r3, #64	; 0x40
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f002 fbb0 	bl	800752c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000093 	.word	0x20000093
 8004ddc:	20000094 	.word	0x20000094
 8004de0:	20000095 	.word	0x20000095

08004de4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004df0:	4b3a      	ldr	r3, [pc, #232]	; (8004edc <USBD_CDC_DeInit+0xf8>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f002 facf 	bl	800739a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004dfc:	4b37      	ldr	r3, [pc, #220]	; (8004edc <USBD_CDC_DeInit+0xf8>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	f003 020f 	and.w	r2, r3, #15
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3324      	adds	r3, #36	; 0x24
 8004e12:	2200      	movs	r2, #0
 8004e14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004e16:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <USBD_CDC_DeInit+0xfc>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f002 fabc 	bl	800739a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004e22:	4b2f      	ldr	r3, [pc, #188]	; (8004ee0 <USBD_CDC_DeInit+0xfc>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004e3e:	4b29      	ldr	r3, [pc, #164]	; (8004ee4 <USBD_CDC_DeInit+0x100>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f002 faa8 	bl	800739a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <USBD_CDC_DeInit+0x100>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f003 020f 	and.w	r2, r3, #15
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3324      	adds	r3, #36	; 0x24
 8004e60:	2200      	movs	r2, #0
 8004e62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e64:	4b1f      	ldr	r3, [pc, #124]	; (8004ee4 <USBD_CDC_DeInit+0x100>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3326      	adds	r3, #38	; 0x26
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	32b0      	adds	r2, #176	; 0xb0
 8004e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01f      	beq.n	8004ed0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	33b0      	adds	r3, #176	; 0xb0
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	32b0      	adds	r2, #176	; 0xb0
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f002 fb7c 	bl	80075b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32b0      	adds	r2, #176	; 0xb0
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000093 	.word	0x20000093
 8004ee0:	20000094 	.word	0x20000094
 8004ee4:	20000095 	.word	0x20000095

08004ee8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	32b0      	adds	r2, #176	; 0xb0
 8004efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e0bf      	b.n	8005098 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d050      	beq.n	8004fc6 <USBD_CDC_Setup+0xde>
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	f040 80af 	bne.w	8005088 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	88db      	ldrh	r3, [r3, #6]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d03a      	beq.n	8004fa8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	da1b      	bge.n	8004f74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	33b0      	adds	r3, #176	; 0xb0
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004f52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	88d2      	ldrh	r2, [r2, #6]
 8004f58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	88db      	ldrh	r3, [r3, #6]
 8004f5e:	2b07      	cmp	r3, #7
 8004f60:	bf28      	it	cs
 8004f62:	2307      	movcs	r3, #7
 8004f64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	89fa      	ldrh	r2, [r7, #14]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 fd89 	bl	8006a84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f72:	e090      	b.n	8005096 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	785a      	ldrb	r2, [r3, #1]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	88db      	ldrh	r3, [r3, #6]
 8004f82:	2b3f      	cmp	r3, #63	; 0x3f
 8004f84:	d803      	bhi.n	8004f8e <USBD_CDC_Setup+0xa6>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	88db      	ldrh	r3, [r3, #6]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	e000      	b.n	8004f90 <USBD_CDC_Setup+0xa8>
 8004f8e:	2240      	movs	r2, #64	; 0x40
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f96:	6939      	ldr	r1, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 fd9b 	bl	8006adc <USBD_CtlPrepareRx>
      break;
 8004fa6:	e076      	b.n	8005096 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	33b0      	adds	r3, #176	; 0xb0
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	7850      	ldrb	r0, [r2, #1]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	4798      	blx	r3
      break;
 8004fc4:	e067      	b.n	8005096 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	785b      	ldrb	r3, [r3, #1]
 8004fca:	2b0b      	cmp	r3, #11
 8004fcc:	d851      	bhi.n	8005072 <USBD_CDC_Setup+0x18a>
 8004fce:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <USBD_CDC_Setup+0xec>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08005005 	.word	0x08005005
 8004fd8:	08005081 	.word	0x08005081
 8004fdc:	08005073 	.word	0x08005073
 8004fe0:	08005073 	.word	0x08005073
 8004fe4:	08005073 	.word	0x08005073
 8004fe8:	08005073 	.word	0x08005073
 8004fec:	08005073 	.word	0x08005073
 8004ff0:	08005073 	.word	0x08005073
 8004ff4:	08005073 	.word	0x08005073
 8004ff8:	08005073 	.word	0x08005073
 8004ffc:	0800502f 	.word	0x0800502f
 8005000:	08005059 	.word	0x08005059
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b03      	cmp	r3, #3
 800500e:	d107      	bne.n	8005020 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005010:	f107 030a 	add.w	r3, r7, #10
 8005014:	2202      	movs	r2, #2
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 fd33 	bl	8006a84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800501e:	e032      	b.n	8005086 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f001 fcbd 	bl	80069a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005028:	2303      	movs	r3, #3
 800502a:	75fb      	strb	r3, [r7, #23]
          break;
 800502c:	e02b      	b.n	8005086 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b03      	cmp	r3, #3
 8005038:	d107      	bne.n	800504a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800503a:	f107 030d 	add.w	r3, r7, #13
 800503e:	2201      	movs	r2, #1
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 fd1e 	bl	8006a84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005048:	e01d      	b.n	8005086 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 fca8 	bl	80069a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005052:	2303      	movs	r3, #3
 8005054:	75fb      	strb	r3, [r7, #23]
          break;
 8005056:	e016      	b.n	8005086 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b03      	cmp	r3, #3
 8005062:	d00f      	beq.n	8005084 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 fc9b 	bl	80069a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800506c:	2303      	movs	r3, #3
 800506e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005070:	e008      	b.n	8005084 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005072:	6839      	ldr	r1, [r7, #0]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 fc94 	bl	80069a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800507a:	2303      	movs	r3, #3
 800507c:	75fb      	strb	r3, [r7, #23]
          break;
 800507e:	e002      	b.n	8005086 <USBD_CDC_Setup+0x19e>
          break;
 8005080:	bf00      	nop
 8005082:	e008      	b.n	8005096 <USBD_CDC_Setup+0x1ae>
          break;
 8005084:	bf00      	nop
      }
      break;
 8005086:	e006      	b.n	8005096 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f001 fc89 	bl	80069a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8005090:	2303      	movs	r3, #3
 8005092:	75fb      	strb	r3, [r7, #23]
      break;
 8005094:	bf00      	nop
  }

  return (uint8_t)ret;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80050b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	32b0      	adds	r2, #176	; 0xb0
 80050be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e065      	b.n	8005196 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	32b0      	adds	r2, #176	; 0xb0
 80050d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	3318      	adds	r3, #24
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02f      	beq.n	8005154 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	f003 020f 	and.w	r2, r3, #15
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	3318      	adds	r3, #24
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 010f 	and.w	r1, r3, #15
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	460b      	mov	r3, r1
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	440b      	add	r3, r1
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4403      	add	r3, r0
 800511c:	3348      	adds	r3, #72	; 0x48
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	fbb2 f1f3 	udiv	r1, r2, r3
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800512a:	2b00      	cmp	r3, #0
 800512c:	d112      	bne.n	8005154 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 020f 	and.w	r2, r3, #15
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3318      	adds	r3, #24
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005146:	78f9      	ldrb	r1, [r7, #3]
 8005148:	2300      	movs	r3, #0
 800514a:	2200      	movs	r2, #0
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f9cc 	bl	80074ea <USBD_LL_Transmit>
 8005152:	e01f      	b.n	8005194 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	33b0      	adds	r3, #176	; 0xb0
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d010      	beq.n	8005194 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	33b0      	adds	r3, #176	; 0xb0
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	32b0      	adds	r2, #176	; 0xb0
 80051b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	32b0      	adds	r2, #176	; 0xb0
 80051c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e01a      	b.n	8005206 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f002 f9ca 	bl	800756e <USBD_LL_GetRxDataSize>
 80051da:	4602      	mov	r2, r0
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	33b0      	adds	r3, #176	; 0xb0
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005200:	4611      	mov	r1, r2
 8005202:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	32b0      	adds	r2, #176	; 0xb0
 8005220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005224:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800522c:	2303      	movs	r3, #3
 800522e:	e025      	b.n	800527c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	33b0      	adds	r3, #176	; 0xb0
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01a      	beq.n	800527a <USBD_CDC_EP0_RxReady+0x6c>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800524a:	2bff      	cmp	r3, #255	; 0xff
 800524c:	d015      	beq.n	800527a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	33b0      	adds	r3, #176	; 0xb0
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005266:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800526e:	b292      	uxth	r2, r2
 8005270:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	22ff      	movs	r2, #255	; 0xff
 8005276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800528c:	2182      	movs	r1, #130	; 0x82
 800528e:	4818      	ldr	r0, [pc, #96]	; (80052f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005290:	f000 fd4f 	bl	8005d32 <USBD_GetEpDesc>
 8005294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005296:	2101      	movs	r1, #1
 8005298:	4815      	ldr	r0, [pc, #84]	; (80052f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800529a:	f000 fd4a 	bl	8005d32 <USBD_GetEpDesc>
 800529e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052a0:	2181      	movs	r1, #129	; 0x81
 80052a2:	4813      	ldr	r0, [pc, #76]	; (80052f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052a4:	f000 fd45 	bl	8005d32 <USBD_GetEpDesc>
 80052a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2210      	movs	r2, #16
 80052b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2200      	movs	r2, #0
 80052c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c4:	711a      	strb	r2, [r3, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d8:	711a      	strb	r2, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2243      	movs	r2, #67	; 0x43
 80052e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052e4:	4b02      	ldr	r3, [pc, #8]	; (80052f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000050 	.word	0x20000050

080052f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052fc:	2182      	movs	r1, #130	; 0x82
 80052fe:	4818      	ldr	r0, [pc, #96]	; (8005360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005300:	f000 fd17 	bl	8005d32 <USBD_GetEpDesc>
 8005304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005306:	2101      	movs	r1, #1
 8005308:	4815      	ldr	r0, [pc, #84]	; (8005360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800530a:	f000 fd12 	bl	8005d32 <USBD_GetEpDesc>
 800530e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005310:	2181      	movs	r1, #129	; 0x81
 8005312:	4813      	ldr	r0, [pc, #76]	; (8005360 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005314:	f000 fd0d 	bl	8005d32 <USBD_GetEpDesc>
 8005318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2210      	movs	r2, #16
 8005324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2200      	movs	r2, #0
 8005330:	711a      	strb	r2, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f042 0202 	orr.w	r2, r2, #2
 8005338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	711a      	strb	r2, [r3, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f042 0202 	orr.w	r2, r2, #2
 800534c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2243      	movs	r2, #67	; 0x43
 8005352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005354:	4b02      	ldr	r3, [pc, #8]	; (8005360 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000050 	.word	0x20000050

08005364 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800536c:	2182      	movs	r1, #130	; 0x82
 800536e:	4818      	ldr	r0, [pc, #96]	; (80053d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005370:	f000 fcdf 	bl	8005d32 <USBD_GetEpDesc>
 8005374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005376:	2101      	movs	r1, #1
 8005378:	4815      	ldr	r0, [pc, #84]	; (80053d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800537a:	f000 fcda 	bl	8005d32 <USBD_GetEpDesc>
 800537e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005380:	2181      	movs	r1, #129	; 0x81
 8005382:	4813      	ldr	r0, [pc, #76]	; (80053d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005384:	f000 fcd5 	bl	8005d32 <USBD_GetEpDesc>
 8005388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2210      	movs	r2, #16
 8005394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d006      	beq.n	80053aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2200      	movs	r2, #0
 80053a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a4:	711a      	strb	r2, [r3, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b8:	711a      	strb	r2, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2243      	movs	r2, #67	; 0x43
 80053c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053c4:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000050 	.word	0x20000050

080053d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	220a      	movs	r2, #10
 80053e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053e2:	4b03      	ldr	r3, [pc, #12]	; (80053f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	2000000c 	.word	0x2000000c

080053f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005404:	2303      	movs	r3, #3
 8005406:	e009      	b.n	800541c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	33b0      	adds	r3, #176	; 0xb0
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	32b0      	adds	r2, #176	; 0xb0
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800544a:	2303      	movs	r3, #3
 800544c:	e008      	b.n	8005460 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	32b0      	adds	r2, #176	; 0xb0
 8005480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005484:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	e004      	b.n	800549a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32b0      	adds	r2, #176	; 0xb0
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	32b0      	adds	r2, #176	; 0xb0
 80054ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e025      	b.n	8005526 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11f      	bne.n	8005524 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <USBD_CDC_TransmitPacket+0x88>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4403      	add	r3, r0
 8005506:	3318      	adds	r3, #24
 8005508:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <USBD_CDC_TransmitPacket+0x88>)
 800550c:	7819      	ldrb	r1, [r3, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 ffe5 	bl	80074ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000093 	.word	0x20000093

08005534 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	32b0      	adds	r2, #176	; 0xb0
 8005546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	32b0      	adds	r2, #176	; 0xb0
 8005556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800555e:	2303      	movs	r3, #3
 8005560:	e018      	b.n	8005594 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7c1b      	ldrb	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <USBD_CDC_ReceivePacket+0x68>)
 800556c:	7819      	ldrb	r1, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f001 ffd7 	bl	800752c <USBD_LL_PrepareReceive>
 800557e:	e008      	b.n	8005592 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <USBD_CDC_ReceivePacket+0x68>)
 8005582:	7819      	ldrb	r1, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800558a:	2340      	movs	r3, #64	; 0x40
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 ffcd 	bl	800752c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000094 	.word	0x20000094

080055a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e01f      	b.n	80055f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	79fa      	ldrb	r2, [r7, #7]
 80055ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f001 fe47 	bl	8007280 <USBD_LL_Init>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005614:	2303      	movs	r3, #3
 8005616:	e025      	b.n	8005664 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	32ae      	adds	r2, #174	; 0xae
 800562a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00f      	beq.n	8005654 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	32ae      	adds	r2, #174	; 0xae
 800563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	f107 020e 	add.w	r2, r7, #14
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
 800564c:	4602      	mov	r2, r0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f001 fe4f 	bl	8007318 <USBD_LL_Start>
 800567a:	4603      	mov	r3, r0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800568c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d009      	beq.n	80056c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	4611      	mov	r1, r2
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	4798      	blx	r3
 80056c4:	4603      	mov	r3, r0
 80056c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	4611      	mov	r1, r2
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80056f8:	2303      	movs	r3, #3
 80056fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f001 f908 	bl	800692e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2b02      	cmp	r3, #2
 8005740:	d01a      	beq.n	8005778 <USBD_LL_SetupStage+0x72>
 8005742:	2b02      	cmp	r3, #2
 8005744:	d822      	bhi.n	800578c <USBD_LL_SetupStage+0x86>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <USBD_LL_SetupStage+0x4a>
 800574a:	2b01      	cmp	r3, #1
 800574c:	d00a      	beq.n	8005764 <USBD_LL_SetupStage+0x5e>
 800574e:	e01d      	b.n	800578c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb5f 	bl	8005e1c <USBD_StdDevReq>
 800575e:	4603      	mov	r3, r0
 8005760:	73fb      	strb	r3, [r7, #15]
      break;
 8005762:	e020      	b.n	80057a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fbc7 	bl	8005f00 <USBD_StdItfReq>
 8005772:	4603      	mov	r3, r0
 8005774:	73fb      	strb	r3, [r7, #15]
      break;
 8005776:	e016      	b.n	80057a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fc29 	bl	8005fd8 <USBD_StdEPReq>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
      break;
 800578a:	e00c      	b.n	80057a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005792:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005796:	b2db      	uxtb	r3, r3
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fe1c 	bl	80073d8 <USBD_LL_StallEP>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]
      break;
 80057a4:	bf00      	nop
  }

  return ret;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	460b      	mov	r3, r1
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80057c2:	7afb      	ldrb	r3, [r7, #11]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d16e      	bne.n	80058a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80057ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	f040 8098 	bne.w	800590c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d913      	bls.n	8005810 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	1ad2      	subs	r2, r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	4293      	cmp	r3, r2
 8005800:	bf28      	it	cs
 8005802:	4613      	movcs	r3, r2
 8005804:	461a      	mov	r2, r3
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f001 f984 	bl	8006b16 <USBD_CtlContinueRx>
 800580e:	e07d      	b.n	800590c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2b02      	cmp	r3, #2
 800581c:	d014      	beq.n	8005848 <USBD_LL_DataOutStage+0x98>
 800581e:	2b02      	cmp	r3, #2
 8005820:	d81d      	bhi.n	800585e <USBD_LL_DataOutStage+0xae>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <USBD_LL_DataOutStage+0x7c>
 8005826:	2b01      	cmp	r3, #1
 8005828:	d003      	beq.n	8005832 <USBD_LL_DataOutStage+0x82>
 800582a:	e018      	b.n	800585e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	75bb      	strb	r3, [r7, #22]
            break;
 8005830:	e018      	b.n	8005864 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005838:	b2db      	uxtb	r3, r3
 800583a:	4619      	mov	r1, r3
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fa5e 	bl	8005cfe <USBD_CoreFindIF>
 8005842:	4603      	mov	r3, r0
 8005844:	75bb      	strb	r3, [r7, #22]
            break;
 8005846:	e00d      	b.n	8005864 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800584e:	b2db      	uxtb	r3, r3
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fa60 	bl	8005d18 <USBD_CoreFindEP>
 8005858:	4603      	mov	r3, r0
 800585a:	75bb      	strb	r3, [r7, #22]
            break;
 800585c:	e002      	b.n	8005864 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	75bb      	strb	r3, [r7, #22]
            break;
 8005862:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005864:	7dbb      	ldrb	r3, [r7, #22]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d119      	bne.n	800589e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d113      	bne.n	800589e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005876:	7dba      	ldrb	r2, [r7, #22]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	32ae      	adds	r2, #174	; 0xae
 800587c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005886:	7dba      	ldrb	r2, [r7, #22]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800588e:	7dba      	ldrb	r2, [r7, #22]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	32ae      	adds	r2, #174	; 0xae
 8005894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f001 f94a 	bl	8006b38 <USBD_CtlSendStatus>
 80058a4:	e032      	b.n	800590c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	4619      	mov	r1, r3
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fa31 	bl	8005d18 <USBD_CoreFindEP>
 80058b6:	4603      	mov	r3, r0
 80058b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058ba:	7dbb      	ldrb	r3, [r7, #22]
 80058bc:	2bff      	cmp	r3, #255	; 0xff
 80058be:	d025      	beq.n	800590c <USBD_LL_DataOutStage+0x15c>
 80058c0:	7dbb      	ldrb	r3, [r7, #22]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d122      	bne.n	800590c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d117      	bne.n	8005902 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80058d2:	7dba      	ldrb	r2, [r7, #22]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	32ae      	adds	r2, #174	; 0xae
 80058d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00f      	beq.n	8005902 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80058e2:	7dba      	ldrb	r2, [r7, #22]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80058ea:	7dba      	ldrb	r2, [r7, #22]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	32ae      	adds	r2, #174	; 0xae
 80058f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	7afa      	ldrb	r2, [r7, #11]
 80058f8:	4611      	mov	r1, r2
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	4798      	blx	r3
 80058fe:	4603      	mov	r3, r0
 8005900:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	e000      	b.n	800590e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b086      	sub	sp, #24
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	460b      	mov	r3, r1
 8005920:	607a      	str	r2, [r7, #4]
 8005922:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005924:	7afb      	ldrb	r3, [r7, #11]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d16f      	bne.n	8005a0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3314      	adds	r3, #20
 800592e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005936:	2b02      	cmp	r3, #2
 8005938:	d15a      	bne.n	80059f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	429a      	cmp	r2, r3
 8005944:	d914      	bls.n	8005970 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	461a      	mov	r2, r3
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f001 f8ac 	bl	8006aba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005962:	2300      	movs	r3, #0
 8005964:	2200      	movs	r2, #0
 8005966:	2100      	movs	r1, #0
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f001 fddf 	bl	800752c <USBD_LL_PrepareReceive>
 800596e:	e03f      	b.n	80059f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d11c      	bne.n	80059b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005984:	429a      	cmp	r2, r3
 8005986:	d316      	bcc.n	80059b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005992:	429a      	cmp	r2, r3
 8005994:	d20f      	bcs.n	80059b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005996:	2200      	movs	r2, #0
 8005998:	2100      	movs	r1, #0
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f001 f88d 	bl	8006aba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059a8:	2300      	movs	r3, #0
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f001 fdbc 	bl	800752c <USBD_LL_PrepareReceive>
 80059b4:	e01c      	b.n	80059f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d10f      	bne.n	80059e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d009      	beq.n	80059e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059e2:	2180      	movs	r1, #128	; 0x80
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f001 fcf7 	bl	80073d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f001 f8b7 	bl	8006b5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d03a      	beq.n	8005a70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f7ff fe42 	bl	8005684 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a08:	e032      	b.n	8005a70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a0a:	7afb      	ldrb	r3, [r7, #11]
 8005a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	4619      	mov	r1, r3
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f97f 	bl	8005d18 <USBD_CoreFindEP>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2bff      	cmp	r3, #255	; 0xff
 8005a22:	d025      	beq.n	8005a70 <USBD_LL_DataInStage+0x15a>
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d122      	bne.n	8005a70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d11c      	bne.n	8005a70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a36:	7dfa      	ldrb	r2, [r7, #23]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	32ae      	adds	r2, #174	; 0xae
 8005a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d014      	beq.n	8005a70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a46:	7dfa      	ldrb	r2, [r7, #23]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a4e:	7dfa      	ldrb	r2, [r7, #23]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	32ae      	adds	r2, #174	; 0xae
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	7afa      	ldrb	r2, [r7, #11]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	4798      	blx	r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a66:	7dbb      	ldrb	r3, [r7, #22]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a6c:	7dbb      	ldrb	r3, [r7, #22]
 8005a6e:	e000      	b.n	8005a72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00e      	beq.n	8005ae0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6852      	ldr	r2, [r2, #4]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	4798      	blx	r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ae0:	2340      	movs	r3, #64	; 0x40
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fc31 	bl	800734e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2240      	movs	r2, #64	; 0x40
 8005af8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005afc:	2340      	movs	r3, #64	; 0x40
 8005afe:	2200      	movs	r2, #0
 8005b00:	2180      	movs	r1, #128	; 0x80
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f001 fc23 	bl	800734e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2240      	movs	r2, #64	; 0x40
 8005b12:	621a      	str	r2, [r3, #32]

  return ret;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	460b      	mov	r3, r1
 8005b28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2204      	movs	r2, #4
 8005b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d106      	bne.n	8005b8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d110      	bne.n	8005bd0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	32ae      	adds	r2, #174	; 0xae
 8005bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e01c      	b.n	8005c36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d115      	bne.n	8005c34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	32ae      	adds	r2, #174	; 0xae
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	32ae      	adds	r2, #174	; 0xae
 8005c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	78fa      	ldrb	r2, [r7, #3]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	32ae      	adds	r2, #174	; 0xae
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e01c      	b.n	8005c9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d115      	bne.n	8005c98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	32ae      	adds	r2, #174	; 0xae
 8005c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32ae      	adds	r2, #174	; 0xae
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	4611      	mov	r1, r2
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6852      	ldr	r2, [r2, #4]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	885b      	ldrh	r3, [r3, #2]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d920      	bls.n	8005d9c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d62:	e013      	b.n	8005d8c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d64:	f107 030a 	add.w	r3, r7, #10
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6978      	ldr	r0, [r7, #20]
 8005d6c:	f000 f81b 	bl	8005da6 <USBD_GetNextDesc>
 8005d70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d108      	bne.n	8005d8c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	789b      	ldrb	r3, [r3, #2]
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d008      	beq.n	8005d9a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	885b      	ldrh	r3, [r3, #2]
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d8e5      	bhi.n	8005d64 <USBD_GetEpDesc+0x32>
 8005d98:	e000      	b.n	8005d9c <USBD_GetEpDesc+0x6a>
          break;
 8005d9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d9c:	693b      	ldr	r3, [r7, #16]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	881a      	ldrh	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4413      	add	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	3301      	adds	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005dfe:	8a3b      	ldrh	r3, [r7, #16]
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	b21a      	sxth	r2, r3
 8005e04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b21b      	sxth	r3, r3
 8005e0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d005      	beq.n	8005e42 <USBD_StdDevReq+0x26>
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d857      	bhi.n	8005eea <USBD_StdDevReq+0xce>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00f      	beq.n	8005e5e <USBD_StdDevReq+0x42>
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d153      	bne.n	8005eea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	32ae      	adds	r2, #174	; 0xae
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5c:	e04a      	b.n	8005ef4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	2b09      	cmp	r3, #9
 8005e64:	d83b      	bhi.n	8005ede <USBD_StdDevReq+0xc2>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <USBD_StdDevReq+0x50>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005ec1 	.word	0x08005ec1
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08005edf 	.word	0x08005edf
 8005e78:	08005ecb 	.word	0x08005ecb
 8005e7c:	08005edf 	.word	0x08005edf
 8005e80:	08005e9f 	.word	0x08005e9f
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005edf 	.word	0x08005edf
 8005e8c:	08005eb7 	.word	0x08005eb7
 8005e90:	08005ea9 	.word	0x08005ea9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa3c 	bl	8006314 <USBD_GetDescriptor>
          break;
 8005e9c:	e024      	b.n	8005ee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fba1 	bl	80065e8 <USBD_SetAddress>
          break;
 8005ea6:	e01f      	b.n	8005ee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fbe0 	bl	8006670 <USBD_SetConfig>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]
          break;
 8005eb4:	e018      	b.n	8005ee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fc83 	bl	80067c4 <USBD_GetConfig>
          break;
 8005ebe:	e013      	b.n	8005ee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fcb4 	bl	8006830 <USBD_GetStatus>
          break;
 8005ec8:	e00e      	b.n	8005ee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fce3 	bl	8006898 <USBD_SetFeature>
          break;
 8005ed2:	e009      	b.n	8005ee8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fd07 	bl	80068ea <USBD_ClrFeature>
          break;
 8005edc:	e004      	b.n	8005ee8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fd5e 	bl	80069a2 <USBD_CtlError>
          break;
 8005ee6:	bf00      	nop
      }
      break;
 8005ee8:	e004      	b.n	8005ef4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fd58 	bl	80069a2 <USBD_CtlError>
      break;
 8005ef2:	bf00      	nop
  }

  return ret;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop

08005f00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f16:	2b40      	cmp	r3, #64	; 0x40
 8005f18:	d005      	beq.n	8005f26 <USBD_StdItfReq+0x26>
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d852      	bhi.n	8005fc4 <USBD_StdItfReq+0xc4>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <USBD_StdItfReq+0x26>
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d14e      	bne.n	8005fc4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d840      	bhi.n	8005fb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	889b      	ldrh	r3, [r3, #4]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d836      	bhi.n	8005fac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	889b      	ldrh	r3, [r3, #4]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fed9 	bl	8005cfe <USBD_CoreFindIF>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	2bff      	cmp	r3, #255	; 0xff
 8005f54:	d01d      	beq.n	8005f92 <USBD_StdItfReq+0x92>
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11a      	bne.n	8005f92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f5c:	7bba      	ldrb	r2, [r7, #14]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	32ae      	adds	r2, #174	; 0xae
 8005f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00f      	beq.n	8005f8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f6c:	7bba      	ldrb	r2, [r7, #14]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f74:	7bba      	ldrb	r2, [r7, #14]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	32ae      	adds	r2, #174	; 0xae
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f8a:	e004      	b.n	8005f96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f90:	e001      	b.n	8005f96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f92:	2303      	movs	r3, #3
 8005f94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	88db      	ldrh	r3, [r3, #6]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d110      	bne.n	8005fc0 <USBD_StdItfReq+0xc0>
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10d      	bne.n	8005fc0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fdc7 	bl	8006b38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005faa:	e009      	b.n	8005fc0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fcf7 	bl	80069a2 <USBD_CtlError>
          break;
 8005fb4:	e004      	b.n	8005fc0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fcf2 	bl	80069a2 <USBD_CtlError>
          break;
 8005fbe:	e000      	b.n	8005fc2 <USBD_StdItfReq+0xc2>
          break;
 8005fc0:	bf00      	nop
      }
      break;
 8005fc2:	e004      	b.n	8005fce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fceb 	bl	80069a2 <USBD_CtlError>
      break;
 8005fcc:	bf00      	nop
  }

  return ret;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	889b      	ldrh	r3, [r3, #4]
 8005fea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d007      	beq.n	8006008 <USBD_StdEPReq+0x30>
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	f200 817f 	bhi.w	80062fc <USBD_StdEPReq+0x324>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d02a      	beq.n	8006058 <USBD_StdEPReq+0x80>
 8006002:	2b20      	cmp	r3, #32
 8006004:	f040 817a 	bne.w	80062fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff fe83 	bl	8005d18 <USBD_CoreFindEP>
 8006012:	4603      	mov	r3, r0
 8006014:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006016:	7b7b      	ldrb	r3, [r7, #13]
 8006018:	2bff      	cmp	r3, #255	; 0xff
 800601a:	f000 8174 	beq.w	8006306 <USBD_StdEPReq+0x32e>
 800601e:	7b7b      	ldrb	r3, [r7, #13]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 8170 	bne.w	8006306 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006026:	7b7a      	ldrb	r2, [r7, #13]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800602e:	7b7a      	ldrb	r2, [r7, #13]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	32ae      	adds	r2, #174	; 0xae
 8006034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 8163 	beq.w	8006306 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006040:	7b7a      	ldrb	r2, [r7, #13]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	32ae      	adds	r2, #174	; 0xae
 8006046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
 8006052:	4603      	mov	r3, r0
 8006054:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006056:	e156      	b.n	8006306 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b03      	cmp	r3, #3
 800605e:	d008      	beq.n	8006072 <USBD_StdEPReq+0x9a>
 8006060:	2b03      	cmp	r3, #3
 8006062:	f300 8145 	bgt.w	80062f0 <USBD_StdEPReq+0x318>
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 809b 	beq.w	80061a2 <USBD_StdEPReq+0x1ca>
 800606c:	2b01      	cmp	r3, #1
 800606e:	d03c      	beq.n	80060ea <USBD_StdEPReq+0x112>
 8006070:	e13e      	b.n	80062f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d002      	beq.n	8006084 <USBD_StdEPReq+0xac>
 800607e:	2b03      	cmp	r3, #3
 8006080:	d016      	beq.n	80060b0 <USBD_StdEPReq+0xd8>
 8006082:	e02c      	b.n	80060de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <USBD_StdEPReq+0xce>
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d00a      	beq.n	80060a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 f99f 	bl	80073d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 f99b 	bl	80073d8 <USBD_LL_StallEP>
 80060a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060a4:	e020      	b.n	80060e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fc7a 	bl	80069a2 <USBD_CtlError>
              break;
 80060ae:	e01b      	b.n	80060e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	885b      	ldrh	r3, [r3, #2]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10e      	bne.n	80060d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <USBD_StdEPReq+0xfe>
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d008      	beq.n	80060d6 <USBD_StdEPReq+0xfe>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	88db      	ldrh	r3, [r3, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 f981 	bl	80073d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fd2e 	bl	8006b38 <USBD_CtlSendStatus>

              break;
 80060dc:	e004      	b.n	80060e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fc5e 	bl	80069a2 <USBD_CtlError>
              break;
 80060e6:	bf00      	nop
          }
          break;
 80060e8:	e107      	b.n	80062fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d002      	beq.n	80060fc <USBD_StdEPReq+0x124>
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d016      	beq.n	8006128 <USBD_StdEPReq+0x150>
 80060fa:	e04b      	b.n	8006194 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <USBD_StdEPReq+0x146>
 8006102:	7bbb      	ldrb	r3, [r7, #14]
 8006104:	2b80      	cmp	r3, #128	; 0x80
 8006106:	d00a      	beq.n	800611e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 f963 	bl	80073d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006112:	2180      	movs	r1, #128	; 0x80
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 f95f 	bl	80073d8 <USBD_LL_StallEP>
 800611a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800611c:	e040      	b.n	80061a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fc3e 	bl	80069a2 <USBD_CtlError>
              break;
 8006126:	e03b      	b.n	80061a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	885b      	ldrh	r3, [r3, #2]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d136      	bne.n	800619e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800613a:	7bbb      	ldrb	r3, [r7, #14]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f001 f969 	bl	8007416 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fcf7 	bl	8006b38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fde2 	bl	8005d18 <USBD_CoreFindEP>
 8006154:	4603      	mov	r3, r0
 8006156:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006158:	7b7b      	ldrb	r3, [r7, #13]
 800615a:	2bff      	cmp	r3, #255	; 0xff
 800615c:	d01f      	beq.n	800619e <USBD_StdEPReq+0x1c6>
 800615e:	7b7b      	ldrb	r3, [r7, #13]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11c      	bne.n	800619e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006164:	7b7a      	ldrb	r2, [r7, #13]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800616c:	7b7a      	ldrb	r2, [r7, #13]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32ae      	adds	r2, #174	; 0xae
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d010      	beq.n	800619e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800617c:	7b7a      	ldrb	r2, [r7, #13]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32ae      	adds	r2, #174	; 0xae
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
 800618e:	4603      	mov	r3, r0
 8006190:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006192:	e004      	b.n	800619e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fc03 	bl	80069a2 <USBD_CtlError>
              break;
 800619c:	e000      	b.n	80061a0 <USBD_StdEPReq+0x1c8>
              break;
 800619e:	bf00      	nop
          }
          break;
 80061a0:	e0ab      	b.n	80062fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d002      	beq.n	80061b4 <USBD_StdEPReq+0x1dc>
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d032      	beq.n	8006218 <USBD_StdEPReq+0x240>
 80061b2:	e097      	b.n	80062e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <USBD_StdEPReq+0x1f2>
 80061ba:	7bbb      	ldrb	r3, [r7, #14]
 80061bc:	2b80      	cmp	r3, #128	; 0x80
 80061be:	d004      	beq.n	80061ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fbed 	bl	80069a2 <USBD_CtlError>
                break;
 80061c8:	e091      	b.n	80062ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	da0b      	bge.n	80061ea <USBD_StdEPReq+0x212>
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
 80061d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	3310      	adds	r3, #16
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	3304      	adds	r3, #4
 80061e8:	e00b      	b.n	8006202 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	4413      	add	r3, r2
 8006200:	3304      	adds	r3, #4
 8006202:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2202      	movs	r2, #2
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fc37 	bl	8006a84 <USBD_CtlSendData>
              break;
 8006216:	e06a      	b.n	80062ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800621c:	2b00      	cmp	r3, #0
 800621e:	da11      	bge.n	8006244 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	f003 020f 	and.w	r2, r3, #15
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	3324      	adds	r3, #36	; 0x24
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d117      	bne.n	800626a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fbb0 	bl	80069a2 <USBD_CtlError>
                  break;
 8006242:	e054      	b.n	80062ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	f003 020f 	and.w	r2, r3, #15
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb9d 	bl	80069a2 <USBD_CtlError>
                  break;
 8006268:	e041      	b.n	80062ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800626a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800626e:	2b00      	cmp	r3, #0
 8006270:	da0b      	bge.n	800628a <USBD_StdEPReq+0x2b2>
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	3310      	adds	r3, #16
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	3304      	adds	r3, #4
 8006288:	e00b      	b.n	80062a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4413      	add	r3, r2
 80062a0:	3304      	adds	r3, #4
 80062a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <USBD_StdEPReq+0x2d8>
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d103      	bne.n	80062b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e00e      	b.n	80062d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 f8c9 	bl	8007454 <USBD_LL_IsStallEP>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2202      	movs	r2, #2
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fbd1 	bl	8006a84 <USBD_CtlSendData>
              break;
 80062e2:	e004      	b.n	80062ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fb5b 	bl	80069a2 <USBD_CtlError>
              break;
 80062ec:	bf00      	nop
          }
          break;
 80062ee:	e004      	b.n	80062fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fb55 	bl	80069a2 <USBD_CtlError>
          break;
 80062f8:	bf00      	nop
      }
      break;
 80062fa:	e005      	b.n	8006308 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fb4f 	bl	80069a2 <USBD_CtlError>
      break;
 8006304:	e000      	b.n	8006308 <USBD_StdEPReq+0x330>
      break;
 8006306:	bf00      	nop
  }

  return ret;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	885b      	ldrh	r3, [r3, #2]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	2b06      	cmp	r3, #6
 8006336:	f200 8128 	bhi.w	800658a <USBD_GetDescriptor+0x276>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <USBD_GetDescriptor+0x2c>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	0800635d 	.word	0x0800635d
 8006344:	08006375 	.word	0x08006375
 8006348:	080063b5 	.word	0x080063b5
 800634c:	0800658b 	.word	0x0800658b
 8006350:	0800658b 	.word	0x0800658b
 8006354:	0800652b 	.word	0x0800652b
 8006358:	08006557 	.word	0x08006557
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	7c12      	ldrb	r2, [r2, #16]
 8006368:	f107 0108 	add.w	r1, r7, #8
 800636c:	4610      	mov	r0, r2
 800636e:	4798      	blx	r3
 8006370:	60f8      	str	r0, [r7, #12]
      break;
 8006372:	e112      	b.n	800659a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	7c1b      	ldrb	r3, [r3, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10d      	bne.n	8006398 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	f107 0208 	add.w	r2, r7, #8
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
 800638c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006396:	e100      	b.n	800659a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	f107 0208 	add.w	r2, r7, #8
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3301      	adds	r3, #1
 80063ae:	2202      	movs	r2, #2
 80063b0:	701a      	strb	r2, [r3, #0]
      break;
 80063b2:	e0f2      	b.n	800659a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	885b      	ldrh	r3, [r3, #2]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b05      	cmp	r3, #5
 80063bc:	f200 80ac 	bhi.w	8006518 <USBD_GetDescriptor+0x204>
 80063c0:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <USBD_GetDescriptor+0xb4>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063e1 	.word	0x080063e1
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006449 	.word	0x08006449
 80063d4:	0800647d 	.word	0x0800647d
 80063d8:	080064b1 	.word	0x080064b1
 80063dc:	080064e5 	.word	0x080064e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	7c12      	ldrb	r2, [r2, #16]
 80063f8:	f107 0108 	add.w	r1, r7, #8
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006402:	e091      	b.n	8006528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 facb 	bl	80069a2 <USBD_CtlError>
            err++;
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	3301      	adds	r3, #1
 8006410:	72fb      	strb	r3, [r7, #11]
          break;
 8006412:	e089      	b.n	8006528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	7c12      	ldrb	r2, [r2, #16]
 800642c:	f107 0108 	add.w	r1, r7, #8
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006436:	e077      	b.n	8006528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fab1 	bl	80069a2 <USBD_CtlError>
            err++;
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	3301      	adds	r3, #1
 8006444:	72fb      	strb	r3, [r7, #11]
          break;
 8006446:	e06f      	b.n	8006528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	7c12      	ldrb	r2, [r2, #16]
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
 8006468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646a:	e05d      	b.n	8006528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa97 	bl	80069a2 <USBD_CtlError>
            err++;
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	3301      	adds	r3, #1
 8006478:	72fb      	strb	r3, [r7, #11]
          break;
 800647a:	e055      	b.n	8006528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	7c12      	ldrb	r2, [r2, #16]
 8006494:	f107 0108 	add.w	r1, r7, #8
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
 800649c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800649e:	e043      	b.n	8006528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa7d 	bl	80069a2 <USBD_CtlError>
            err++;
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	3301      	adds	r3, #1
 80064ac:	72fb      	strb	r3, [r7, #11]
          break;
 80064ae:	e03b      	b.n	8006528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00b      	beq.n	80064d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	7c12      	ldrb	r2, [r2, #16]
 80064c8:	f107 0108 	add.w	r1, r7, #8
 80064cc:	4610      	mov	r0, r2
 80064ce:	4798      	blx	r3
 80064d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064d2:	e029      	b.n	8006528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa63 	bl	80069a2 <USBD_CtlError>
            err++;
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	3301      	adds	r3, #1
 80064e0:	72fb      	strb	r3, [r7, #11]
          break;
 80064e2:	e021      	b.n	8006528 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	7c12      	ldrb	r2, [r2, #16]
 80064fc:	f107 0108 	add.w	r1, r7, #8
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
 8006504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006506:	e00f      	b.n	8006528 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa49 	bl	80069a2 <USBD_CtlError>
            err++;
 8006510:	7afb      	ldrb	r3, [r7, #11]
 8006512:	3301      	adds	r3, #1
 8006514:	72fb      	strb	r3, [r7, #11]
          break;
 8006516:	e007      	b.n	8006528 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fa41 	bl	80069a2 <USBD_CtlError>
          err++;
 8006520:	7afb      	ldrb	r3, [r7, #11]
 8006522:	3301      	adds	r3, #1
 8006524:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006526:	bf00      	nop
      }
      break;
 8006528:	e037      	b.n	800659a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	7c1b      	ldrb	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	f107 0208 	add.w	r2, r7, #8
 800653e:	4610      	mov	r0, r2
 8006540:	4798      	blx	r3
 8006542:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006544:	e029      	b.n	800659a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fa2a 	bl	80069a2 <USBD_CtlError>
        err++;
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	3301      	adds	r3, #1
 8006552:	72fb      	strb	r3, [r7, #11]
      break;
 8006554:	e021      	b.n	800659a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7c1b      	ldrb	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10d      	bne.n	800657a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	f107 0208 	add.w	r2, r7, #8
 800656a:	4610      	mov	r0, r2
 800656c:	4798      	blx	r3
 800656e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	2207      	movs	r2, #7
 8006576:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006578:	e00f      	b.n	800659a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa10 	bl	80069a2 <USBD_CtlError>
        err++;
 8006582:	7afb      	ldrb	r3, [r7, #11]
 8006584:	3301      	adds	r3, #1
 8006586:	72fb      	strb	r3, [r7, #11]
      break;
 8006588:	e007      	b.n	800659a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa08 	bl	80069a2 <USBD_CtlError>
      err++;
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	3301      	adds	r3, #1
 8006596:	72fb      	strb	r3, [r7, #11]
      break;
 8006598:	bf00      	nop
  }

  if (err != 0U)
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11e      	bne.n	80065de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	88db      	ldrh	r3, [r3, #6]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d016      	beq.n	80065d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80065a8:	893b      	ldrh	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00e      	beq.n	80065cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	88da      	ldrh	r2, [r3, #6]
 80065b2:	893b      	ldrh	r3, [r7, #8]
 80065b4:	4293      	cmp	r3, r2
 80065b6:	bf28      	it	cs
 80065b8:	4613      	movcs	r3, r2
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065be:	893b      	ldrh	r3, [r7, #8]
 80065c0:	461a      	mov	r2, r3
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fa5d 	bl	8006a84 <USBD_CtlSendData>
 80065ca:	e009      	b.n	80065e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f9e7 	bl	80069a2 <USBD_CtlError>
 80065d4:	e004      	b.n	80065e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 faae 	bl	8006b38 <USBD_CtlSendStatus>
 80065dc:	e000      	b.n	80065e0 <USBD_GetDescriptor+0x2cc>
    return;
 80065de:	bf00      	nop
  }
}
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop

080065e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	889b      	ldrh	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d131      	bne.n	800665e <USBD_SetAddress+0x76>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	88db      	ldrh	r3, [r3, #6]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d12d      	bne.n	800665e <USBD_SetAddress+0x76>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	885b      	ldrh	r3, [r3, #2]
 8006606:	2b7f      	cmp	r3, #127	; 0x7f
 8006608:	d829      	bhi.n	800665e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	885b      	ldrh	r3, [r3, #2]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006614:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b03      	cmp	r3, #3
 8006620:	d104      	bne.n	800662c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f9bc 	bl	80069a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800662a:	e01d      	b.n	8006668 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	7bfa      	ldrb	r2, [r7, #15]
 8006630:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 ff37 	bl	80074ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa7a 	bl	8006b38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006652:	e009      	b.n	8006668 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800665c:	e004      	b.n	8006668 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f99e 	bl	80069a2 <USBD_CtlError>
  }
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	885b      	ldrh	r3, [r3, #2]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	4b4e      	ldr	r3, [pc, #312]	; (80067c0 <USBD_SetConfig+0x150>)
 8006686:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006688:	4b4d      	ldr	r3, [pc, #308]	; (80067c0 <USBD_SetConfig+0x150>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d905      	bls.n	800669c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f985 	bl	80069a2 <USBD_CtlError>
    return USBD_FAIL;
 8006698:	2303      	movs	r3, #3
 800669a:	e08c      	b.n	80067b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d002      	beq.n	80066ae <USBD_SetConfig+0x3e>
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d029      	beq.n	8006700 <USBD_SetConfig+0x90>
 80066ac:	e075      	b.n	800679a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066ae:	4b44      	ldr	r3, [pc, #272]	; (80067c0 <USBD_SetConfig+0x150>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d020      	beq.n	80066f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80066b6:	4b42      	ldr	r3, [pc, #264]	; (80067c0 <USBD_SetConfig+0x150>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066c0:	4b3f      	ldr	r3, [pc, #252]	; (80067c0 <USBD_SetConfig+0x150>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fe ffe7 	bl	800569a <USBD_SetClassConfig>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d008      	beq.n	80066e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f962 	bl	80069a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066e6:	e065      	b.n	80067b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fa25 	bl	8006b38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2203      	movs	r2, #3
 80066f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066f6:	e05d      	b.n	80067b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fa1d 	bl	8006b38 <USBD_CtlSendStatus>
      break;
 80066fe:	e059      	b.n	80067b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006700:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <USBD_SetConfig+0x150>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d112      	bne.n	800672e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006710:	4b2b      	ldr	r3, [pc, #172]	; (80067c0 <USBD_SetConfig+0x150>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800671a:	4b29      	ldr	r3, [pc, #164]	; (80067c0 <USBD_SetConfig+0x150>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fe ffd6 	bl	80056d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa06 	bl	8006b38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800672c:	e042      	b.n	80067b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <USBD_SetConfig+0x150>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	429a      	cmp	r2, r3
 800673a:	d02a      	beq.n	8006792 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7fe ffc4 	bl	80056d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800674a:	4b1d      	ldr	r3, [pc, #116]	; (80067c0 <USBD_SetConfig+0x150>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006754:	4b1a      	ldr	r3, [pc, #104]	; (80067c0 <USBD_SetConfig+0x150>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fe ff9d 	bl	800569a <USBD_SetClassConfig>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00f      	beq.n	800678a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f918 	bl	80069a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fe ffa9 	bl	80056d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006788:	e014      	b.n	80067b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f9d4 	bl	8006b38 <USBD_CtlSendStatus>
      break;
 8006790:	e010      	b.n	80067b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9d0 	bl	8006b38 <USBD_CtlSendStatus>
      break;
 8006798:	e00c      	b.n	80067b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f900 	bl	80069a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067a2:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <USBD_SetConfig+0x150>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fe ff92 	bl	80056d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067ae:	2303      	movs	r3, #3
 80067b0:	73fb      	strb	r3, [r7, #15]
      break;
 80067b2:	bf00      	nop
  }

  return ret;
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200001a0 	.word	0x200001a0

080067c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	88db      	ldrh	r3, [r3, #6]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d004      	beq.n	80067e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f8e2 	bl	80069a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067de:	e023      	b.n	8006828 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	dc02      	bgt.n	80067f2 <USBD_GetConfig+0x2e>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dc03      	bgt.n	80067f8 <USBD_GetConfig+0x34>
 80067f0:	e015      	b.n	800681e <USBD_GetConfig+0x5a>
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d00b      	beq.n	800680e <USBD_GetConfig+0x4a>
 80067f6:	e012      	b.n	800681e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3308      	adds	r3, #8
 8006802:	2201      	movs	r2, #1
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f93c 	bl	8006a84 <USBD_CtlSendData>
        break;
 800680c:	e00c      	b.n	8006828 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	2201      	movs	r2, #1
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f934 	bl	8006a84 <USBD_CtlSendData>
        break;
 800681c:	e004      	b.n	8006828 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8be 	bl	80069a2 <USBD_CtlError>
        break;
 8006826:	bf00      	nop
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006840:	b2db      	uxtb	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	2b02      	cmp	r3, #2
 8006846:	d81e      	bhi.n	8006886 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	88db      	ldrh	r3, [r3, #6]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d004      	beq.n	800685a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f8a5 	bl	80069a2 <USBD_CtlError>
        break;
 8006858:	e01a      	b.n	8006890 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f043 0202 	orr.w	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	330c      	adds	r3, #12
 800687a:	2202      	movs	r2, #2
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f900 	bl	8006a84 <USBD_CtlSendData>
      break;
 8006884:	e004      	b.n	8006890 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f88a 	bl	80069a2 <USBD_CtlError>
      break;
 800688e:	bf00      	nop
  }
}
 8006890:	bf00      	nop
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	885b      	ldrh	r3, [r3, #2]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d107      	bne.n	80068ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f940 	bl	8006b38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80068b8:	e013      	b.n	80068e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	885b      	ldrh	r3, [r3, #2]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d10b      	bne.n	80068da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	889b      	ldrh	r3, [r3, #4]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f930 	bl	8006b38 <USBD_CtlSendStatus>
}
 80068d8:	e003      	b.n	80068e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f860 	bl	80069a2 <USBD_CtlError>
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d80b      	bhi.n	800691a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	885b      	ldrh	r3, [r3, #2]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d10c      	bne.n	8006924 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f910 	bl	8006b38 <USBD_CtlSendStatus>
      }
      break;
 8006918:	e004      	b.n	8006924 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f840 	bl	80069a2 <USBD_CtlError>
      break;
 8006922:	e000      	b.n	8006926 <USBD_ClrFeature+0x3c>
      break;
 8006924:	bf00      	nop
  }
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	781a      	ldrb	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff fa41 	bl	8005de0 <SWAPBYTE>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3301      	adds	r3, #1
 800696a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff fa34 	bl	8005de0 <SWAPBYTE>
 8006978:	4603      	mov	r3, r0
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fa27 	bl	8005de0 <SWAPBYTE>
 8006992:	4603      	mov	r3, r0
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	80da      	strh	r2, [r3, #6]
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ac:	2180      	movs	r1, #128	; 0x80
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fd12 	bl	80073d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069b4:	2100      	movs	r1, #0
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fd0e 	bl	80073d8 <USBD_LL_StallEP>
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d036      	beq.n	8006a48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80069de:	6938      	ldr	r0, [r7, #16]
 80069e0:	f000 f836 	bl	8006a50 <USBD_GetLen>
 80069e4:	4603      	mov	r3, r0
 80069e6:	3301      	adds	r3, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	4413      	add	r3, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	3301      	adds	r3, #1
 8006a02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4413      	add	r3, r2
 8006a0a:	2203      	movs	r2, #3
 8006a0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	3301      	adds	r3, #1
 8006a12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a14:	e013      	b.n	8006a3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	7812      	ldrb	r2, [r2, #0]
 8006a20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3301      	adds	r3, #1
 8006a26:	613b      	str	r3, [r7, #16]
    idx++;
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	4413      	add	r3, r2
 8006a34:	2200      	movs	r2, #0
 8006a36:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e7      	bne.n	8006a16 <USBD_GetString+0x52>
 8006a46:	e000      	b.n	8006a4a <USBD_GetString+0x86>
    return;
 8006a48:	bf00      	nop
  }
}
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a60:	e005      	b.n	8006a6e <USBD_GetLen+0x1e>
  {
    len++;
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	3301      	adds	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f5      	bne.n	8006a62 <USBD_GetLen+0x12>
  }

  return len;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fd1d 	bl	80074ea <USBD_LL_Transmit>

  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fd0c 	bl	80074ea <USBD_LL_Transmit>

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2203      	movs	r2, #3
 8006aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	2100      	movs	r1, #0
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fd10 	bl	800752c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	2100      	movs	r1, #0
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fcff 	bl	800752c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2204      	movs	r2, #4
 8006b44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fccb 	bl	80074ea <USBD_LL_Transmit>

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2205      	movs	r2, #5
 8006b6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2200      	movs	r2, #0
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fcd9 	bl	800752c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4912      	ldr	r1, [pc, #72]	; (8006bd4 <MX_USB_DEVICE_Init+0x50>)
 8006b8c:	4812      	ldr	r0, [pc, #72]	; (8006bd8 <MX_USB_DEVICE_Init+0x54>)
 8006b8e:	f7fe fd07 	bl	80055a0 <USBD_Init>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b98:	f7f9 fddc 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b9c:	490f      	ldr	r1, [pc, #60]	; (8006bdc <MX_USB_DEVICE_Init+0x58>)
 8006b9e:	480e      	ldr	r0, [pc, #56]	; (8006bd8 <MX_USB_DEVICE_Init+0x54>)
 8006ba0:	f7fe fd2e 	bl	8005600 <USBD_RegisterClass>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006baa:	f7f9 fdd3 	bl	8000754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006bae:	490c      	ldr	r1, [pc, #48]	; (8006be0 <MX_USB_DEVICE_Init+0x5c>)
 8006bb0:	4809      	ldr	r0, [pc, #36]	; (8006bd8 <MX_USB_DEVICE_Init+0x54>)
 8006bb2:	f7fe fc1f 	bl	80053f4 <USBD_CDC_RegisterInterface>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006bbc:	f7f9 fdca 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bc0:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <MX_USB_DEVICE_Init+0x54>)
 8006bc2:	f7fe fd53 	bl	800566c <USBD_Start>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006bcc:	f7f9 fdc2 	bl	8000754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bd0:	bf00      	nop
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200000ac 	.word	0x200000ac
 8006bd8:	200001a4 	.word	0x200001a4
 8006bdc:	20000018 	.word	0x20000018
 8006be0:	20000098 	.word	0x20000098

08006be4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006be8:	2200      	movs	r2, #0
 8006bea:	4905      	ldr	r1, [pc, #20]	; (8006c00 <CDC_Init_FS+0x1c>)
 8006bec:	4805      	ldr	r0, [pc, #20]	; (8006c04 <CDC_Init_FS+0x20>)
 8006bee:	f7fe fc1b 	bl	8005428 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bf2:	4905      	ldr	r1, [pc, #20]	; (8006c08 <CDC_Init_FS+0x24>)
 8006bf4:	4803      	ldr	r0, [pc, #12]	; (8006c04 <CDC_Init_FS+0x20>)
 8006bf6:	f7fe fc39 	bl	800546c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20000c84 	.word	0x20000c84
 8006c04:	200001a4 	.word	0x200001a4
 8006c08:	20000484 	.word	0x20000484

08006c0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	6039      	str	r1, [r7, #0]
 8006c26:	71fb      	strb	r3, [r7, #7]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b23      	cmp	r3, #35	; 0x23
 8006c30:	d84a      	bhi.n	8006cc8 <CDC_Control_FS+0xac>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <CDC_Control_FS+0x1c>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006cc9 	.word	0x08006cc9
 8006c3c:	08006cc9 	.word	0x08006cc9
 8006c40:	08006cc9 	.word	0x08006cc9
 8006c44:	08006cc9 	.word	0x08006cc9
 8006c48:	08006cc9 	.word	0x08006cc9
 8006c4c:	08006cc9 	.word	0x08006cc9
 8006c50:	08006cc9 	.word	0x08006cc9
 8006c54:	08006cc9 	.word	0x08006cc9
 8006c58:	08006cc9 	.word	0x08006cc9
 8006c5c:	08006cc9 	.word	0x08006cc9
 8006c60:	08006cc9 	.word	0x08006cc9
 8006c64:	08006cc9 	.word	0x08006cc9
 8006c68:	08006cc9 	.word	0x08006cc9
 8006c6c:	08006cc9 	.word	0x08006cc9
 8006c70:	08006cc9 	.word	0x08006cc9
 8006c74:	08006cc9 	.word	0x08006cc9
 8006c78:	08006cc9 	.word	0x08006cc9
 8006c7c:	08006cc9 	.word	0x08006cc9
 8006c80:	08006cc9 	.word	0x08006cc9
 8006c84:	08006cc9 	.word	0x08006cc9
 8006c88:	08006cc9 	.word	0x08006cc9
 8006c8c:	08006cc9 	.word	0x08006cc9
 8006c90:	08006cc9 	.word	0x08006cc9
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006cc9 	.word	0x08006cc9
 8006ca0:	08006cc9 	.word	0x08006cc9
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cc9 	.word	0x08006cc9
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	08006cc9 	.word	0x08006cc9
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006cc9 	.word	0x08006cc9
 8006cbc:	08006cc9 	.word	0x08006cc9
 8006cc0:	08006cc9 	.word	0x08006cc9
 8006cc4:	08006cc9 	.word	0x08006cc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006cc8:	bf00      	nop
  }

  return (USBD_OK);
 8006cca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	480c      	ldr	r0, [pc, #48]	; (8006d18 <CDC_Receive_FS+0x40>)
 8006ce6:	f7fe fbc1 	bl	800546c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cea:	480b      	ldr	r0, [pc, #44]	; (8006d18 <CDC_Receive_FS+0x40>)
 8006cec:	f7fe fc22 	bl	8005534 <USBD_CDC_ReceivePacket>
  memcpy(rx_usb, Buf, (uint8_t)*Len);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4808      	ldr	r0, [pc, #32]	; (8006d1c <CDC_Receive_FS+0x44>)
 8006cfc:	f000 fcb2 	bl	8007664 <memcpy>
  (*usbRxCb)(Buf, Len);
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <CDC_Receive_FS+0x48>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	4611      	mov	r1, r2
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
  return (USBD_OK);
 8006d0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	200001a4 	.word	0x200001a4
 8006d1c:	2000015c 	.word	0x2000015c
 8006d20:	20000480 	.word	0x20000480

08006d24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <CDC_Transmit_FS+0x48>)
 8006d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e00b      	b.n	8006d62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d4a:	887b      	ldrh	r3, [r7, #2]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4806      	ldr	r0, [pc, #24]	; (8006d6c <CDC_Transmit_FS+0x48>)
 8006d52:	f7fe fb69 	bl	8005428 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006d56:	4805      	ldr	r0, [pc, #20]	; (8006d6c <CDC_Transmit_FS+0x48>)
 8006d58:	f7fe fba6 	bl	80054a8 <USBD_CDC_TransmitPacket>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200001a4 	.word	0x200001a4

08006d70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <Register_USB_rxCb>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void Register_USB_rxCb(usbRxCb_t cb)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

	if(cb != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <Register_USB_rxCb+0x14>
	{
		usbRxCb = cb ;
 8006da2:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <Register_USB_rxCb+0x20>)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6013      	str	r3, [r2, #0]
	}
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	20000480 	.word	0x20000480

08006db8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2212      	movs	r2, #18
 8006dc8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	200000c8 	.word	0x200000c8

08006ddc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2204      	movs	r2, #4
 8006dec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006dee:	4b03      	ldr	r3, [pc, #12]	; (8006dfc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	200000dc 	.word	0x200000dc

08006e00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	6039      	str	r1, [r7, #0]
 8006e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4907      	ldr	r1, [pc, #28]	; (8006e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e16:	4808      	ldr	r0, [pc, #32]	; (8006e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e18:	f7ff fdd4 	bl	80069c4 <USBD_GetString>
 8006e1c:	e004      	b.n	8006e28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	4904      	ldr	r1, [pc, #16]	; (8006e34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e22:	4805      	ldr	r0, [pc, #20]	; (8006e38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e24:	f7ff fdce 	bl	80069c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e28:	4b02      	ldr	r3, [pc, #8]	; (8006e34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20001484 	.word	0x20001484
 8006e38:	080076c0 	.word	0x080076c0

08006e3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	4904      	ldr	r1, [pc, #16]	; (8006e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e4c:	4804      	ldr	r0, [pc, #16]	; (8006e60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e4e:	f7ff fdb9 	bl	80069c4 <USBD_GetString>
  return USBD_StrDesc;
 8006e52:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20001484 	.word	0x20001484
 8006e60:	080076d8 	.word	0x080076d8

08006e64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	221a      	movs	r2, #26
 8006e74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e76:	f000 f843 	bl	8006f00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e7a:	4b02      	ldr	r3, [pc, #8]	; (8006e84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	200000e0 	.word	0x200000e0

08006e88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4907      	ldr	r1, [pc, #28]	; (8006ebc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e9e:	4808      	ldr	r0, [pc, #32]	; (8006ec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ea0:	f7ff fd90 	bl	80069c4 <USBD_GetString>
 8006ea4:	e004      	b.n	8006eb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4904      	ldr	r1, [pc, #16]	; (8006ebc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eaa:	4805      	ldr	r0, [pc, #20]	; (8006ec0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eac:	f7ff fd8a 	bl	80069c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb0:	4b02      	ldr	r3, [pc, #8]	; (8006ebc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20001484 	.word	0x20001484
 8006ec0:	080076ec 	.word	0x080076ec

08006ec4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d105      	bne.n	8006ee2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4907      	ldr	r1, [pc, #28]	; (8006ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eda:	4808      	ldr	r0, [pc, #32]	; (8006efc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006edc:	f7ff fd72 	bl	80069c4 <USBD_GetString>
 8006ee0:	e004      	b.n	8006eec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4904      	ldr	r1, [pc, #16]	; (8006ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ee6:	4805      	ldr	r0, [pc, #20]	; (8006efc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ee8:	f7ff fd6c 	bl	80069c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eec:	4b02      	ldr	r3, [pc, #8]	; (8006ef8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20001484 	.word	0x20001484
 8006efc:	080076f8 	.word	0x080076f8

08006f00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f06:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <Get_SerialNum+0x44>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f0c:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <Get_SerialNum+0x48>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f12:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <Get_SerialNum+0x4c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f26:	2208      	movs	r2, #8
 8006f28:	4909      	ldr	r1, [pc, #36]	; (8006f50 <Get_SerialNum+0x50>)
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f814 	bl	8006f58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f30:	2204      	movs	r2, #4
 8006f32:	4908      	ldr	r1, [pc, #32]	; (8006f54 <Get_SerialNum+0x54>)
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	f000 f80f 	bl	8006f58 <IntToUnicode>
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	1fff7a10 	.word	0x1fff7a10
 8006f48:	1fff7a14 	.word	0x1fff7a14
 8006f4c:	1fff7a18 	.word	0x1fff7a18
 8006f50:	200000e2 	.word	0x200000e2
 8006f54:	200000f2 	.word	0x200000f2

08006f58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	75fb      	strb	r3, [r7, #23]
 8006f6e:	e027      	b.n	8006fc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	0f1b      	lsrs	r3, r3, #28
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d80b      	bhi.n	8006f90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	0f1b      	lsrs	r3, r3, #28
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	4619      	mov	r1, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	440b      	add	r3, r1
 8006f88:	3230      	adds	r2, #48	; 0x30
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e00a      	b.n	8006fa6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	0f1b      	lsrs	r3, r3, #28
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	440b      	add	r3, r1
 8006fa0:	3237      	adds	r2, #55	; 0x37
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fac:	7dfb      	ldrb	r3, [r7, #23]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	75fb      	strb	r3, [r7, #23]
 8006fc0:	7dfa      	ldrb	r2, [r7, #23]
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d3d3      	bcc.n	8006f70 <IntToUnicode+0x18>
  }
}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
	...

08006fd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	; 0x28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fe0:	f107 0314 	add.w	r3, r7, #20
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	605a      	str	r2, [r3, #4]
 8006fea:	609a      	str	r2, [r3, #8]
 8006fec:	60da      	str	r2, [r3, #12]
 8006fee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ff8:	d147      	bne.n	800708a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	4b25      	ldr	r3, [pc, #148]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	6313      	str	r3, [r2, #48]	; 0x30
 800700a:	4b22      	ldr	r3, [pc, #136]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800701a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800701c:	2300      	movs	r3, #0
 800701e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007020:	2300      	movs	r3, #0
 8007022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007024:	f107 0314 	add.w	r3, r7, #20
 8007028:	4619      	mov	r1, r3
 800702a:	481b      	ldr	r0, [pc, #108]	; (8007098 <HAL_PCD_MspInit+0xc0>)
 800702c:	f7f9 fe20 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007030:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007036:	2302      	movs	r3, #2
 8007038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800703e:	2303      	movs	r3, #3
 8007040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007042:	230a      	movs	r3, #10
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007046:	f107 0314 	add.w	r3, r7, #20
 800704a:	4619      	mov	r1, r3
 800704c:	4812      	ldr	r0, [pc, #72]	; (8007098 <HAL_PCD_MspInit+0xc0>)
 800704e:	f7f9 fe0f 	bl	8000c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 8007054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007056:	4a0f      	ldr	r2, [pc, #60]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 8007058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705c:	6353      	str	r3, [r2, #52]	; 0x34
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	4a0b      	ldr	r2, [pc, #44]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 8007068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800706c:	6453      	str	r3, [r2, #68]	; 0x44
 800706e:	4b09      	ldr	r3, [pc, #36]	; (8007094 <HAL_PCD_MspInit+0xbc>)
 8007070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800707a:	2200      	movs	r2, #0
 800707c:	2100      	movs	r1, #0
 800707e:	2043      	movs	r0, #67	; 0x43
 8007080:	f7f9 fdbf 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007084:	2043      	movs	r0, #67	; 0x43
 8007086:	f7f9 fdd8 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800708a:	bf00      	nop
 800708c:	3728      	adds	r7, #40	; 0x28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800
 8007098:	40020000 	.word	0x40020000

0800709c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f7fe fb27 	bl	8005706 <USBD_LL_SetupStage>
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	4619      	mov	r1, r3
 80070ea:	f7fe fb61 	bl	80057b0 <USBD_LL_DataOutStage>
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007108:	78fa      	ldrb	r2, [r7, #3]
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	4613      	mov	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	334c      	adds	r3, #76	; 0x4c
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	4619      	mov	r1, r3
 800711e:	f7fe fbfa 	bl	8005916 <USBD_LL_DataInStage>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fd2e 	bl	8005b9a <USBD_LL_SOF>
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800714e:	2301      	movs	r3, #1
 8007150:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d102      	bne.n	8007160 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
 800715e:	e008      	b.n	8007172 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d102      	bne.n	800716e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007168:	2301      	movs	r3, #1
 800716a:	73fb      	strb	r3, [r7, #15]
 800716c:	e001      	b.n	8007172 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800716e:	f7f9 faf1 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007178:	7bfa      	ldrb	r2, [r7, #15]
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fcce 	bl	8005b1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fc76 	bl	8005a7a <USBD_LL_Reset>
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fcc9 	bl	8005b3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80071be:	f043 0301 	orr.w	r3, r3, #1
 80071c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071cc:	4b04      	ldr	r3, [pc, #16]	; (80071e0 <HAL_PCD_SuspendCallback+0x48>)
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	4a03      	ldr	r2, [pc, #12]	; (80071e0 <HAL_PCD_SuspendCallback+0x48>)
 80071d2:	f043 0306 	orr.w	r3, r3, #6
 80071d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	e000ed00 	.word	0xe000ed00

080071e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fcb9 	bl	8005b6a <USBD_LL_Resume>
}
 80071f8:	bf00      	nop
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	4611      	mov	r1, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fd11 	bl	8005c3e <USBD_LL_IsoOUTIncomplete>
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	4611      	mov	r1, r2
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fccd 	bl	8005bda <USBD_LL_IsoINIncomplete>
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fd23 	bl	8005ca2 <USBD_LL_DevConnected>
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fd20 	bl	8005cb8 <USBD_LL_DevDisconnected>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d13c      	bne.n	800730a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007290:	4a20      	ldr	r2, [pc, #128]	; (8007314 <USBD_LL_Init+0x94>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <USBD_LL_Init+0x94>)
 800729c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072a0:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <USBD_LL_Init+0x94>)
 80072a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80072a8:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <USBD_LL_Init+0x94>)
 80072aa:	2204      	movs	r2, #4
 80072ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80072ae:	4b19      	ldr	r3, [pc, #100]	; (8007314 <USBD_LL_Init+0x94>)
 80072b0:	2202      	movs	r2, #2
 80072b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072b4:	4b17      	ldr	r3, [pc, #92]	; (8007314 <USBD_LL_Init+0x94>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80072ba:	4b16      	ldr	r3, [pc, #88]	; (8007314 <USBD_LL_Init+0x94>)
 80072bc:	2202      	movs	r2, #2
 80072be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072c0:	4b14      	ldr	r3, [pc, #80]	; (8007314 <USBD_LL_Init+0x94>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <USBD_LL_Init+0x94>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <USBD_LL_Init+0x94>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <USBD_LL_Init+0x94>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072d8:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <USBD_LL_Init+0x94>)
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072de:	480d      	ldr	r0, [pc, #52]	; (8007314 <USBD_LL_Init+0x94>)
 80072e0:	f7f9 fe63 	bl	8000faa <HAL_PCD_Init>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072ea:	f7f9 fa33 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	4808      	ldr	r0, [pc, #32]	; (8007314 <USBD_LL_Init+0x94>)
 80072f2:	f7fb f8ba 	bl	800246a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072f6:	2240      	movs	r2, #64	; 0x40
 80072f8:	2100      	movs	r1, #0
 80072fa:	4806      	ldr	r0, [pc, #24]	; (8007314 <USBD_LL_Init+0x94>)
 80072fc:	f7fb f86e 	bl	80023dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	2101      	movs	r1, #1
 8007304:	4803      	ldr	r0, [pc, #12]	; (8007314 <USBD_LL_Init+0x94>)
 8007306:	f7fb f869 	bl	80023dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20001684 	.word	0x20001684

08007318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800732e:	4618      	mov	r0, r3
 8007330:	f7f9 ff58 	bl	80011e4 <HAL_PCD_Start>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f942 	bl	80075c4 <USBD_Get_USB_Status>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007344:	7bbb      	ldrb	r3, [r7, #14]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	461a      	mov	r2, r3
 800735c:	4603      	mov	r3, r0
 800735e:	70fb      	strb	r3, [r7, #3]
 8007360:	460b      	mov	r3, r1
 8007362:	70bb      	strb	r3, [r7, #2]
 8007364:	4613      	mov	r3, r2
 8007366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007376:	78bb      	ldrb	r3, [r7, #2]
 8007378:	883a      	ldrh	r2, [r7, #0]
 800737a:	78f9      	ldrb	r1, [r7, #3]
 800737c:	f7fa fc29 	bl	8001bd2 <HAL_PCD_EP_Open>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f91c 	bl	80075c4 <USBD_Get_USB_Status>
 800738c:	4603      	mov	r3, r0
 800738e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007390:	7bbb      	ldrb	r3, [r7, #14]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	460b      	mov	r3, r1
 80073a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073b4:	78fa      	ldrb	r2, [r7, #3]
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fa fc72 	bl	8001ca2 <HAL_PCD_EP_Close>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f8fd 	bl	80075c4 <USBD_Get_USB_Status>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	4611      	mov	r1, r2
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fa fd4a 	bl	8001e90 <HAL_PCD_EP_SetStall>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f8de 	bl	80075c4 <USBD_Get_USB_Status>
 8007408:	4603      	mov	r3, r0
 800740a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800740c:	7bbb      	ldrb	r3, [r7, #14]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	4611      	mov	r1, r2
 8007434:	4618      	mov	r0, r3
 8007436:	f7fa fd8f 	bl	8001f58 <HAL_PCD_EP_ClrStall>
 800743a:	4603      	mov	r3, r0
 800743c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f8bf 	bl	80075c4 <USBD_Get_USB_Status>
 8007446:	4603      	mov	r3, r0
 8007448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800744a:	7bbb      	ldrb	r3, [r7, #14]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800746c:	2b00      	cmp	r3, #0
 800746e:	da0b      	bge.n	8007488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	4613      	mov	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	333e      	adds	r3, #62	; 0x3e
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	e00b      	b.n	80074a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	4613      	mov	r3, r2
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800749e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fa fb5c 	bl	8001b88 <HAL_PCD_SetAddress>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f874 	bl	80075c4 <USBD_Get_USB_Status>
 80074dc:	4603      	mov	r3, r0
 80074de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	460b      	mov	r3, r1
 80074f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007508:	7af9      	ldrb	r1, [r7, #11]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	f7fa fc75 	bl	8001dfc <HAL_PCD_EP_Transmit>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 f853 	bl	80075c4 <USBD_Get_USB_Status>
 800751e:	4603      	mov	r3, r0
 8007520:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007522:	7dbb      	ldrb	r3, [r7, #22]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	460b      	mov	r3, r1
 800753a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800754a:	7af9      	ldrb	r1, [r7, #11]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	f7fa fbf1 	bl	8001d36 <HAL_PCD_EP_Receive>
 8007554:	4603      	mov	r3, r0
 8007556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f832 	bl	80075c4 <USBD_Get_USB_Status>
 8007560:	4603      	mov	r3, r0
 8007562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007564:	7dbb      	ldrb	r3, [r7, #22]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f7fa fc21 	bl	8001dcc <HAL_PCD_EP_GetRxCount>
 800758a:	4603      	mov	r3, r0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800759c:	4b03      	ldr	r3, [pc, #12]	; (80075ac <USBD_static_malloc+0x18>)
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20001b90 	.word	0x20001b90

080075b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]

}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d817      	bhi.n	8007608 <USBD_Get_USB_Status+0x44>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <USBD_Get_USB_Status+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	080075f1 	.word	0x080075f1
 80075e4:	080075f7 	.word	0x080075f7
 80075e8:	080075fd 	.word	0x080075fd
 80075ec:	08007603 	.word	0x08007603
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
    break;
 80075f4:	e00b      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075f6:	2303      	movs	r3, #3
 80075f8:	73fb      	strb	r3, [r7, #15]
    break;
 80075fa:	e008      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075fc:	2301      	movs	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007600:	e005      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	73fb      	strb	r3, [r7, #15]
    break;
 8007606:	e002      	b.n	800760e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	73fb      	strb	r3, [r7, #15]
    break;
 800760c:	bf00      	nop
  }
  return usb_status;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4d0d      	ldr	r5, [pc, #52]	; (8007654 <__libc_init_array+0x38>)
 8007620:	4c0d      	ldr	r4, [pc, #52]	; (8007658 <__libc_init_array+0x3c>)
 8007622:	1b64      	subs	r4, r4, r5
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	2600      	movs	r6, #0
 8007628:	42a6      	cmp	r6, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	4d0b      	ldr	r5, [pc, #44]	; (800765c <__libc_init_array+0x40>)
 800762e:	4c0c      	ldr	r4, [pc, #48]	; (8007660 <__libc_init_array+0x44>)
 8007630:	f000 f82e 	bl	8007690 <_init>
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	2600      	movs	r6, #0
 800763a:	42a6      	cmp	r6, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f855 3b04 	ldr.w	r3, [r5], #4
 8007644:	4798      	blx	r3
 8007646:	3601      	adds	r6, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f855 3b04 	ldr.w	r3, [r5], #4
 800764e:	4798      	blx	r3
 8007650:	3601      	adds	r6, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	08007728 	.word	0x08007728
 8007658:	08007728 	.word	0x08007728
 800765c:	08007728 	.word	0x08007728
 8007660:	0800772c 	.word	0x0800772c

08007664 <memcpy>:
 8007664:	440a      	add	r2, r1
 8007666:	4291      	cmp	r1, r2
 8007668:	f100 33ff 	add.w	r3, r0, #4294967295
 800766c:	d100      	bne.n	8007670 <memcpy+0xc>
 800766e:	4770      	bx	lr
 8007670:	b510      	push	{r4, lr}
 8007672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800767a:	4291      	cmp	r1, r2
 800767c:	d1f9      	bne.n	8007672 <memcpy+0xe>
 800767e:	bd10      	pop	{r4, pc}

08007680 <memset>:
 8007680:	4402      	add	r2, r0
 8007682:	4603      	mov	r3, r0
 8007684:	4293      	cmp	r3, r2
 8007686:	d100      	bne.n	800768a <memset+0xa>
 8007688:	4770      	bx	lr
 800768a:	f803 1b01 	strb.w	r1, [r3], #1
 800768e:	e7f9      	b.n	8007684 <memset+0x4>

08007690 <_init>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr

0800769c <_fini>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr
